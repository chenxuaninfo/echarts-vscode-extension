{"globe":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the globe component.\n\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n\n"},{"type":["string","number"],"valide":["auto"],"name":"left","desc":"\n\nDistance between  component and the left side of the container.\n\n`left` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'left'`, `'center'`, or `'right'`.\n\nIf the `left` value is set to be `'left'`, `'center'`, or `'right'`, then the component will be aligned automatically based on position.\n"},{"type":["string","number"],"valide":["auto"],"name":"top","desc":"\n\nDistance between  component and the top side of the container.\n\n`top` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'top'`, `'middle'`, or `'bottom'`.\n\nIf the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`, then the component will be aligned automatically based on position.\n"},{"type":["string","number"],"valide":["auto"],"name":"right","desc":"\n\nDistance between  component and the right side of the container.\n\n`right` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\n Adaptive by default.\n"},{"type":["string","number"],"valide":["auto"],"name":"bottom","desc":"\n\nDistance between  component and the bottom side of the container.\n\n`bottom` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\n Adaptive by default.\n\n"},{"type":["string","number"],"valide":["auto"],"name":"width","desc":"\n\n The width of the view of the component.\n"},{"type":["string","number"],"valide":["auto"],"name":"height","desc":"\n\n The height of the view of the component.\n\n\n\n\n\n\n\n"},{"type":["number"],"valide":[100],"name":"globeRadius","desc":"\nThe radius of the globe. The unit is relative to the three-dimensional space, related to [viewControl.distance](~globe.viewControl.distance).\n\n"},{"type":["number"],"valide":[150],"name":"globeOuterRadius","desc":"\n\nThe outer radius of the globe. This area between `globeRadius` and `globeOuterRadius` will be used to display 3D histograms, scatter plots, etc.\n\n\n\n"},{"type":["string"],"valide":["'auto'"],"name":"environment","desc":"\n\nEnvironment map. Support for solid colors, gradual colors, URL of panoramic texture. The default is `'auto'`, which is used as the environment texture when [light.ambientCubemap.texture](~.light.ambientCubemap.texture) is configured. Otherwise, the environment texture is not displayed.\n\nExample: \n```js\n// Configure as a panoramic texture\nenvironment: 'asset/starfield.jpg'\n// Configured as a solid black background\nenvironment: '#000'\n// Configured as a background with a vertical gradient\nenvironment: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n  offset: 0, color: '#00aaff' // Sky color\n}, {\n  offset: 0.7, color: '#998866' // Ground color\n}, {\n  offset: 1, color: '#998866' // Ground color\n}], false)\n\n```\n\n\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement","EChartsInstance"],"valide":[],"name":"baseTexture","desc":"\n\nThe texture of the globe. Support for the string of image paths, images object or Canvas objects.\n\nIt also supports to use an echarts example as a texture directly, in which case mouse actions on Earth will be linked to the echarts instance used on the texture.\n\nExample: \n```js\n// Use the globe's texture image\nbaseTexture: 'asset/earth.jpg'\n\n// Use the world map example of echarts as a texture.\nvar canvas = document.createElement('canvas');\nvar mapChart = echarts.init(canvas, null, {\n    width: 4096, height: 2048\n});\nmapChart.setOption({\n    series : [\n        {\n            type: 'map',\n            map: 'world',\n            // Draw full size echarts example\n            top: 0, left: 0,\n            right: 0, bottom: 0,\n            boundingCoords: [[-180, 90], [180, -90]]\n        }\n    ]\n});\n...\nbaseTexture: mapChart\n\n```\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"heightTexture","desc":"\n\nThe high texture of the globe. High textures can be used to match [Bump Map](https://zh.wikipedia.org/wiki/%E5%87%B9%E5%87%B8%E8%B4%B4%E5%9B%BE) to show the light and dark details of the Earth's surface.\nThe following two images show the difference between using `heightTexture` and not using `heightTexuture`.\n\n![400xauto](~heightmap-enable.png)\n\n![400xauto](~heightmap-disable.png)\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"displacementTexture","desc":"\n\nThe displacement texture of the vertices of the globe, the default is the same as a [heightTexture]()\n\nCompared to bump maps, The displacement of the vertex is to directly shift the vertices according to the texture. Valid when [displaymentScale](~globe.displaymentScale) is greater than 0.\n"},{"type":["number"],"valide":[0],"name":"displacementScale","desc":"\n\nThe displacement map of the globe's vertex. The default is 0, which means no displacement.\nThe following two images show the effects of setting different `displacementScale`.\n\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/displacement-disable.png\" width=\"100%\" title=\"Scale: 0\">\n    <img src=\"documents/asset/gl/img/displacement-enable.png\" width=\"100%\" title=\"Scale: 0.1\">\n</div>\n"},{"type":["string"],"valide":["'medium'"],"name":"displacementQuality","desc":"\n\nThe quality of the globe's vertex displacement. Support for `'low'`, `'medium'`, `'high'`, `'ultra'` settings.Higher quality can show more ground height detail. \nThe following two images show the effects of different `displacementQuality`.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/displacement-low.png\" width=\"100%\" title=\"Low\">\n    <img src=\"documents/asset/gl/img/displacement-ultra.png\" width=\"100%\" title=\"Ultra\">\n</div>\n\n\n\n"},{"type":["string"],"valide":[],"name":"shading","desc":"\n\nThe coloring effect of 3D graphics in 地球. The following three coloring methods are supported in echarts-gl:\n\n+ `'color'`\nOnly display colors, not affected by other factors such as lighting.\n\n+ `'lambert'`\nThrough the classic [lambert] coloring, can express the light and dark that the light shows.\n\n+ `'realistic'`\nRealistic rendering, combined with [light.ambientCubemap](~globe.light.ambientCubemap) and [postEffect](~globe.postEffect), can improve the quality and texture of the display. [Physical Based Rendering (PBR)] (https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/) is used in ECharts GL to represent realistic materials.\n\n\nHere are the differences between different coloring effects.\n\n![250xauto](~globe-shading-color.png)\n![250xauto](~globe-shading-lambert.png)\n![250xauto](~globe-shading-realistic.png)\n\n"},{"type":["Object"],"valide":[],"name":"realisticMaterial","desc":"\n\nThe configuration item of the realistic material is valid when [shading](~globe.shading) is `'realistic'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"lambertMaterial","desc":"\n\nThe configuration item of the lambert material is valid when [shading](~globe.shading) is `'lambert'`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"colorMaterial","desc":"\n\nThe color material related configuration item is valid when [shading](~globe.shading) is `'color'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"light","desc":"\n\nLight related settings. Invalid when [shading](~globe.shading) is 'color'.\n\nThe lighting settings affect the components and all the charts on the component's coordinate system.\n\nA reasonable lighting setting can make the brightness and darkness of the whole scene richer and more layered.\n"},{"type":["Object"],"valide":[],"name":"postEffect","desc":"\n\nPost-processing effects related configuration. It can add effects such as highlights, depth of field, screen space ambient occlusion (SSAO), toning to the picture. And it can make the whole picture more textured.\n\nThe following are the differences between closing `postEffect` and opening `postEffect`.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-disable.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-enable.png\" width=\"100%\" title=\"Enable\">\n</div>\n\nNote that when postEffect is enable, [temporalSuperSampling](~globe.temporalSuperSampling) is enable by default. After the picture is still, the picture will continue to be enhanced, including anti-aliasing, depth of field, SSAO, shadows, etc.\n"},{"type":["Object"],"valide":[],"name":"temporalSuperSampling","desc":"\n\nTemporal supersampling. After opening [postEffect](~globe.postEffect), WebGL's default MSAA (MultiSampling Anti-Aliasing) will not work, so we need to solve the problem of sampling.\n\nTemporal supersampling is an anti-aliasing method. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated, thus achieving anti-aliasing effect.\nAnd in this process, ECharts-gl also progressively enhances some of the effects in [postEffect](~globe.postEffect) that require sampled guarantees. For example [SSAO](~globe.postEffect.SSAO), [Depth of Field](~globe.postEffect.depthOfField), and shadow.\n\nThe following is the difference between not opening `temporalSuperSampling` and opening `temporalSuperSampling`.\n\n<div class=\"twentytwenty-container\" style=\"width: 800px;\">\n    <img src=\"documents/asset/gl/img/surface-no-taa.png\" width=\"100%\" title=\"No AA\">\n    <img src=\"documents/asset/gl/img/surface-taa.png\" width=\"100%\" title=\"AA\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"viewControl","desc":"\n\n`viewControl` is used for mouse rotation, zooming, and other perspective control.\n\n"},{"type":["Array"],"valide":[],"name":"layers","desc":"\n\nConfiguration of the Earth's Surface Layer.\nYou can use this configuration item to add clouds, or to supplement [baseTexture](~globe. baseTexture) to draw the outline of the country, and so on.\n"}],"globe.realisticMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0.5],"name":"roughness","desc":"\n\nThe `roughness` attribute is used to indicate the roughness of the material, `0` is completely smooth, `1` is completely rough, and the middle value is between the two.\n\n\nThe following images show the effect of `roughness` in `globe](~globe) `0.2` (smooth) and `0.8` (rough).\n\n![autox280](~globe-gloss.png)\n![autox280](~globe-rough.png)\n\n\nWhen you want to express more complex materials. You can set `roughness` directly to the texture that stores the roughness with each pixel as follows.\n\n![300x300](~roughness.png)\n\nThe more white the color in the texture, the larger the value and the rougher it is. You can get texture resources of different materials from resource websites such as [http://freepbr.com/] (http://freepbr.com/). You can also generate it yourself using other tools.\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0],"name":"metalness","desc":"\n\nThe `metalness` attribute is used to indicate whether the material is metal or non-metal, `0` is non-metallic, `1` is metal, and the middle value is between the two. Usually set to `0` and `1` to meet most of the scenes.\n\n\nThe picture below show the difference between `metal' and '0' in [globe](~globe).\n\n![autox280](~globe-metal.png)\n![autox280](~globe-non-metal.png)\n\n\nAs with [roughness](~globe.realisticMaterial.roughness) you can set `metalness` directly to the metal texture.\n"},{"type":["number"],"valide":[0.5],"name":"roughnessAdjust","desc":"\n\nRoughness adjustment is useful when using roughness map. The overall roughness of the texture can be adjusted. The default is `0.5`, `0` is completely smooth, `1` is completely rough.\n"},{"type":["number"],"valide":[0.5],"name":"metalnessAdjust","desc":"\n\nMetalness adjustment is useful when using metalness maps. The overall metallicity of the texture can be adjusted. The default is `0.5`, `0` is non-metal, `1` is metal.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"normalTexture","desc":"\n\nNormal map of material details.\n\nUsing normal maps, you can still display rich shades of detail on the surface of the object with fewer vertices.\n\n"}],"globe.lambertMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"}],"globe.colorMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n\n\n\n\n\n"}],"globe.light.main":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of the main light source.\n\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of the main light source.\n"},{"type":["boolean"],"valide":[],"name":"shadow","desc":"\n\nWhether the main light source displays a shadow. The default is off.\n\nTurning on the shadows can bring more realistic and layered lighting to the scene. But it also increases the operating overhead of the program.\n\nThe following two images show the difference between turning on the shadow and turning off the shadow.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow.png\" width=\"100%\" title=\"Shadow\">\n    <img src=\"documents/asset/gl/img/geo-no-shadow.png\" width=\"100%\" title=\"No Shadow\">\n</div>\n"},{"type":["string"],"valide":["'medium'"],"name":"shadowQuality","desc":"\n\nThe quality of the shadow. You can choose `'low'`, `'medium'`, `'high'`, `'ultra'`\n\nThe following two images shows the difference between low quality and high quality shadows.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow-low.png\" width=\"100%\" title=\"Low\">\n    <img src=\"documents/asset/gl/img/geo-shadow-high.png\" width=\"100%\" title=\"High\">\n</div>\n"},{"type":["number"],"valide":[0],"name":"alpha","desc":"\n\nThe main light source is around the x-axis, which is the angle of up-down rotation. Control the direction of the light with [beta](~globe.light.main.beta).\n\nAs the following image show:\n\n![](~light-alpha-beta.png)\n\nThe [globe](~globe) component can control the time of sunlight by [time](~globe.light.main.time).\n"},{"type":["number"],"valide":[0],"name":"beta","desc":"\n\nThe main light source is around the y-axis, which is the angle of the left-right rotation.\n\n\n"},{"type":["Date"],"valide":[],"name":"time","desc":"\n\nThe time of sunshine. The current system time is used by default.\n\n\n"}],"globe.light":[{"type":["Object"],"valide":[],"name":"main","desc":"\n\nThe setting of the main light source of the scene. In the [globe](~globe) component is the sun.\n"},{"type":["Object"],"valide":[],"name":"ambient","desc":"\n\nGlobal ambient light settings.\n"},{"type":["Object"],"valide":[],"name":"ambientCubemap","desc":"\n\nThe ambientCubemap uses texture as the source of ambient light, which provides diffuse and specular for objects. The diffuse and specular can be set separately by [diffuseIntensity](~globe.light.ambientCubemap.diffuseIntensity) and [specularIntensity](~globe.light.ambientCubemap.specularIntensity).\n\n"}],"globe.light.ambient":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of ambient light.\n"},{"type":["number"],"valide":[0.2],"name":"intensity","desc":"\n\nThe intensity of ambient light.\n"}],"globe.light.ambientCubemap":[{"type":["string"],"valide":[],"name":"texture","desc":"\n\nThe URL of the ambient cubemap supports HDR images in the `.hdr` format. You can obtained the resources for `.hdr` from http://www.hdrlabs.com/sibl/archive.html and other websites.\n\nExample：\n\n```js\nambientCubemap: {\n    texture: 'pisa.hdr',\n    // The exposure value used when analytic hdr\n    exposure: 1.0\n}\n```\n"},{"type":["number"],"valide":[0.5],"name":"diffuseIntensity","desc":"\n\nThe intensity of diffuse.\n"},{"type":["number"],"valide":[0.5],"name":"specularIntensity","desc":"\n\nThe intensity of specular.\n\n\n\n\n\n"}],"globe.postEffect":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable post-processing effects. Not enabled by default.\n"},{"type":["Object"],"valide":[],"name":"bloom","desc":"\n\nBloom is used to reproducing the effects that occur in real cameras when taking pictures in a bright environment.\nBecause traditional RGB can only represent colors in the range of '0 - 255', so we need to use the bloom effect simulates fringes of light extending from the borders of bright areas, creating the illusion of a bright light overwhelming the camera. As shown below：\n\n![](~globe-posteffect-bloom.png)\n"},{"type":["Object"],"valide":[],"name":"depthOfField","desc":"\n\nDepth of Field is a post-processing effect that simulates the focus properties of a camera. The area of focus is clear, and the area away from the focus is gradually blurred.\n\nThe depth of field effect allows the observer to focus on the area of focus and make the picture feel stronger. Large depth of field can also create a macro model effect.\n\nThe following are the differences between turning off and turning on the depth of field effect.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-dof.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/geo-dof.png\" width=\"100%\" title=\"Enable\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"screenSpaceAmbientOcclusion","desc":"\n\n\nThe ambient occlusion post-processing effect darkens the corners, holes, crevices, and areas where most light can`t reach. It is a supplement to the traditional shadow map, which makes the whole scene more natural and layered.\n\nBelow is a comparison of the effects of no SSAO and SSAO:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-ssao.png\" width=\"100%\" title=\"No SSAO\">\n    <img src=\"documents/asset/gl/img/geo-ssao.png\" width=\"100%\" title=\"SSAO\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"SSAO","desc":"\n\nSame as [screenSpaceAmbientOcclusion](~globe.postEffect.screenSpaceAmbientOcclusion)\n\n"},{"type":["Object"],"valide":[],"name":"colorCorrection","desc":"\n\nColor correction and adjustment. Similar to Color Adjustments in Photoshop.\n\nThe same scene in the figure below is adjusted to the difference between the cool color system and the warm color system.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/buildings-cold.jpg\" width=\"100%\" title=\"Cold\">\n    <img src=\"documents/asset/gl/img/buildings-warm.jpg\" width=\"100%\" title=\"Warm\">\n</div>\n\n"},{"type":["Object"],"valide":[],"name":"FXAA","desc":"\n\nAfter opening [postEffect](~globe.postEffect), WebGL's default MSAA (Multi Sampling Anti Aliasing) will not work. At this time, FXAA (Fast Approximate Anti-Aliasing) can solve the anti-aliasing problem quickly and easily. FXAA blurs the edge of the scene to solve the problem of aliasing. It works well on some scenes, but in echarts-gl, you need to ensure that the edges of many texts and lines are sharp and clear, so FXAA is not suitable. At this point we can use supersampling by setting a higher `devicePixelRatio` as follows:\n\n```js\nvar chart = echarts.init(dom, null, {\n    devicePixelRatio: 2\n})\n```\n\nHowever, setting a higher `devicePixelRatio` has high requirements for computer performance, so more often we recommend using [temporalSuperSampling](~globe.temporalSuperSampling) in echarts-gl. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated.,thus achieving anti-aliasing effect.\n"}],"globe.postEffect.bloom":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the bloom effect.\n"},{"type":["number"],"valide":[0.1],"name":"bloomIntensity","desc":"\n\nThe intensity of the bloom. The default is 0.1.\n"}],"globe.postEffect.depthOfField":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the depth of field.\n"},{"type":["boolean"],"valide":[50],"name":"focalDistance","desc":"\n\nThe initial focus distance. The user can click on the area to automatically focus.\n"},{"type":["boolean"],"valide":[20],"name":"focalRange","desc":"\n\nThe size of the in-focus area. The objects in this range are completely clear and there is no blurring.\n\n"},{"type":["number"],"valide":[2.8],"name":"fstop","desc":"\n\n[F value] of the lens (https://zh.wikipedia.org/wiki/%E7%84%A6%E6%AF%94), the smaller the value, the shallower the depth of field.\n"},{"type":["number"],"valide":[10],"name":"blurRadius","desc":"\n\nBlur radius outside the focus.\n\nThe difference blur effect between the different radius. \n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-dof-small.png\" width=\"100%\" title=\"blurSize: 3\">\n    <img src=\"documents/asset/gl/img/geo-dof-large.png\" width=\"100%\" title=\"blurSize: 10\">\n</div>\n"}],"globe.postEffect.SSAO":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable SSAO (screen space ambient occlusion). Not enabled by default.\n"},{"type":["string"],"valide":["'medium'"],"name":"quality","desc":"\n\nThe quality of SSAO (screen space ambient occlusion). Supporting`'low'`, `'medium'`, `'high'`, `'ultra'`\n"},{"type":["number"],"valide":[2],"name":"radius","desc":"\n\nThe radius of the SSAO (screen space ambient occlusion). The larger the radius, the more natural the effect, but you need to set a higher `'quality'`. \n\nThe following example is the difference between a smaller and larger radius:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-ssao-small-radius.png\" width=\"100%\" title=\"Radius: 1\">\n    <img src=\"documents/asset/gl/img/geo-ssao-large-radius.png\" width=\"100%\" title=\"Radius: 10\">\n</div>\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of SSAO (screen space ambient occlusion). The larger the value, the darker the color.\n\n"}],"globe.postEffect.colorCorrection":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the color correction.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"lookupTexture","desc":"\n\nColor correction lookup texture, recommended.\n\nThe color correction lookup texture is a texture image like the one below.\n\n![200xauto](~lookup.png)\n\nThis is the basic lookup texture image that you can use directly.\nTo adjust the color of the scene to the effect you want, you can take a screenshot of the scene and adjust the color to the desired effect in image processing software such as Photoshop. Then apply the same adjustment to the image of the lookup texture above.\n\nFor example, after turning into a cool tone, the image of the lookup texture will look like this:\n\n![200xauto](~crispwinter.png)\n\nThen the texture image is used as the value of the configuration item, and you can get the same effect in Photoshop.\n\nOf course, if you just want to get a screenshot, you don't have to do it anymore, but if you want to easily adjust to the ideal color in real-time interactive works, this is very useful.\n"},{"type":["number"],"valide":[0],"name":"exposure","desc":"\n\nThe exposure of the image.\n"},{"type":["number"],"valide":[0],"name":"brightness","desc":"\n\nThe brightness of the image.\n"},{"type":["number"],"valide":[1],"name":"contrast","desc":"\n\nThe contrast of the image.\n"},{"type":["number"],"valide":[1],"name":"saturation","desc":"\n\nThe saturation of the image.\n\n\n"}],"globe.postEffect.FXAA":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable FXAA. Not enabled by default.\n\n\n\n\n\n\n\n"}],"globe.temporalSuperSampling":[{"type":["boolean"],"valide":["'auto'"],"name":"enable","desc":"\n\nWhether to enable temporal supersampling. By default, temporal supersampling is also turned on synchronously when [postEffect] (~globe.postEffect) is turned on.\n\n\n\n\n"}],"globe.viewControl":[{"type":["string"],"valide":["perspective"],"name":"projection","desc":"\n\nThe way of projection, the default is `'perspective'` projection, also supports setting to `'orthogonal'` projection.\n\n"},{"type":["boolean"],"valide":[],"name":"autoRotate","desc":"\n\nWhether to enable the angle of view to automatically rotate around the object.\n"},{"type":["string"],"valide":["cw"],"name":"autoRotateDirection","desc":"\n\nThe direction in which the object auto rotates. The default is `'cw'` means clockwise from top to bottom, and can also use  `'ccw'` means counterclockwise from top to bottom.\n"},{"type":["number"],"valide":[10],"name":"autoRotateSpeed","desc":"\n\nThe speed at which the object auto rotates. The unit is `angle/second`, the default is `10`, which is a turn of `36` seconds.\n\n"},{"type":["number"],"valide":[3],"name":"autoRotateAfterStill","desc":"\n\nThe time interval for automatic rotation to resume after the mouse is still. Valid after opening [autoRotate](~globe.viewControl.autoRotate).\n\n"},{"type":["number"],"valide":[0.8],"name":"damping","desc":"\n\nThe damping when the mouse is rotated, zoomed, etc.\nWhen it is greater than 0, the angle of view will continue to move (rotate and zoom) due to certain inertia after the mouse is still.\n\n\n"},{"type":["number","Array"],"valide":[1],"name":"rotateSensitivity","desc":"\n\nThe sensitivity of the rotation operation. The greater the value, the more sensitive. Supports the use of arrays to set the horizontal and vertical rotation sensitivity separately.\n\n\nThe default is `1`.\n\nCannot be rotated after setting to `0`.\n\n```js\n// can't rotate\nrotateSensitivity: 0\n// can only be rotated horizontally\nrotateSensitivity: [1, 0]\n//  can only rotate vertically\nrotateSensitivity: [0, 1]\n```\n"},{"type":["number"],"valide":[1],"name":"zoomSensitivity","desc":"\n\nThe sensitivity of the zoom operation, the larger the value, the more sensitive. The default is `1`.\n\nCan`t be scaled after setting to `0`.\n"},{"type":["number"],"valide":[0],"name":"panSensitivity","desc":"\n\nThe sensitivity of the panning operation, the greater the value, the more sensitive. Supports the use of arrays to set the horizontal and vertical translation sensitivity.\n\nThe default is `1`.\n\nCannot pan after setting to `0`.\n"},{"type":["string"],"valide":["left"],"name":"panMouseButton","desc":"\n\nThe mouse button used for panning operation supports:\n\n+ `'left'` left mouse button (default)\n\n+ `'middle'` middle mouse button\n\n+ `'right'` right mouse button\n\nNote: If set to the right mouse button, the default context menu will be blocked.\n"},{"type":["string"],"valide":["middle"],"name":"rotateMouseButton","desc":"\n\nThe mouse button used for the rotation operation supports:\n\n+ `'left'` left mouse button\n\n+ `'middle'` middle mouse button (default)\n\n+ `'right'` right mouse button\n\nNote: If set to the right mouse button, the default context menu will be blocked.\n"},{"type":["number"],"valide":[150],"name":"distance","desc":"\n\nThe distance of the default perspective from the subject. For [globe](~globe), the distance from the Earth's surface is the distance from the center origin for other components such as [grid3D](~grid3D) and [geo3D](~geo3D). Valid when [projection](~globe.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[40],"name":"minDistance","desc":"\n\nThe angle of view is controlled by the mouse to bring the minimum distance to the subject. Valid when [projection](~globe.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[400],"name":"maxDistance","desc":"\n\nThe angle of view can be extended to the maximum distance of the subject by mouse control. Valid when [projection](~globe.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[150],"name":"orthographicSize","desc":"\n\nThe size of the orthogonal projection. Valid when [projection](~globe.viewControl.projection) is `'orthographic'`.\n\n"},{"type":["number"],"valide":[20],"name":"maxOrthographicSize","desc":"\n\nThe maximum value of the orthogonal projection scaling. Valid when [projection](~globe.viewControl.projection) is `'orthographic'`.\n"},{"type":["number"],"valide":[400],"name":"minOrthographicSize","desc":"\n\nThe minimum value of the orthogonal projection scaling. Valid when [projection](~globe.viewControl.projection) is `'orthographic'`\n"},{"type":["number"],"valide":[0],"name":"alpha","desc":"\n\nThe angle of view is around the x-axis, which is the angle of rotation up and down. With [beta](~globe.light.main.beta) you can control the direction of the perspective.\n\nAs shown below：\n\n![](~view-alpha-beta.png)\n"},{"type":["number"],"valide":[0],"name":"beta","desc":"\n\nThe angle of view is around the y-axis, which is the angle of rotation from left to right.\n"},{"type":["Array"],"valide":[],"name":"center","desc":"\n\nAt the center of the angle of view, the rotation will also rotate around this center point. The default is `[0,0,0]`.\n"},{"type":["number"],"valide":[-90],"name":"minAlpha","desc":"\n\nThe minimum alpha value to rotate up and down. That is, the angle of view can be rotated to reach the uppermost angle.\n"},{"type":["number"],"valide":[90],"name":"maxAlpha","desc":"\n\nThe maximum alpha value to rotate up and down. That is, the angle of view can be rotated to the lowest angle.\n"},{"type":["number"],"valide":[null],"name":"minBeta","desc":"\n\nThe minimum beta value to rotate left and right. That is, the angle of view can be rotated to the leftmost angle.\n"},{"type":["number"],"valide":[null],"name":"maxBeta","desc":"\n\nThe maximum beta value to rotate left and right rotation. That is, the angle of view can be rotated to the rightmost angle.\n\n\n"},{"type":["boolean"],"valide":[],"name":"animation","desc":"\n\nWhether to enable animation.\n"},{"type":["number"],"valide":[1000],"name":"animationDurationUpdate","desc":"\n\nThe duration time for update the transition animation.\n"},{"type":["string"],"valide":["cubicInOut"],"name":"animationEasingUpdate","desc":"\n\nThe easing effect for update transition animation.\n\n\n\n\n\n"},{"type":["Array"],"valide":[],"name":"targetCoord","desc":"\n\nPosition the longitudes and latitudes.\nIgnore [alpha](~globe.viewControl.alpha) 和 [beta](~globe.viewControl.beta) after the setting.\n\n\n```js\nviewControl: {\n    // locate in BeiJing\n    targetCoord: [116.46, 39.92]\n}\n```\n\n"}],"globe.layers":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show this layer.\n"},{"type":["string"],"valide":["'overlay'"],"name":"type","desc":"\n\nLayper type, Optional：\n\n+ `'overlay'`\n\nThe overlay on the ground surface can be used to display clouds and the like.\n\n+ `'blend'`\n\nMix with [baseTexture](~globe.baseTexture).\n"},{"type":["string"],"valide":[],"name":"name","desc":"\n\nThe name of the layer. When setting the properties of the layer with setOption, you can use the name to identify the layer that needs to be updated.\n\n```js\nchart.setOption({\n    globe: {\n        layer: [{\n            // Update the texture of the layer named 'cloud'\n            name: 'cloud',\n            texture: 'cloud.png'\n        }]\n    }\n});\n```\n"},{"type":["string"],"valide":["'albedo'"],"name":"blendTo","desc":"\n\nWhen [type](~globe.layers.type) is `'blend'` is valid .\n\nOptional：\n+ `albedo` is mixed to albedo, affected by lighting.\n\n+ `emission` is mixed to self-illuminating, unaffected by light.\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of the mixture.\n"},{"type":["string"],"valide":["'lambert'"],"name":"shading","desc":"\n\nThe coloring effect of the overlay is the same as [globe.shading](~globe.shading), which supports `'color'`, `'lambert'`, `'realistic'`\n\nValid when [type](globe.layers.type) is `'overlay'`.\n"},{"type":["number"],"valide":[],"name":"distance","desc":"\n\nThe distance from the overlay to the surface of the globe.\n\nValid when [type](~globe.layers.type) is `'overlay'`.\n\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement","EChartsInstance"],"valide":[],"name":"texture","desc":"\n\nThe texture of the globe. Support for the string of image paths, images object or Canvas objects.\n\nIt also supports to use an echarts example as a texture directly, in which case mouse actions on Earth will be linked to the echarts instance used on the texture.\n\n\n"}],"geo3D":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display 3D geographic coordinate system components.\n\n\n"},{"type":["string"],"valide":[],"name":"map","desc":"\nThe map type. The map type used in ECharts-gl is the same as the [geo](http://echarts.baidu.com/option.html#geo.map) component.\n\nYou can download the required map file in the [Map Download Interface](http://ecomfe.github.io/echarts-builder-web/map3.html), then to import and register it into ECharts.\n \nEChart provides map data in two formats. One is the JS file that can be imported directly through the script tag. After it is introduced, the map name and data will be automatically registered. Another is the JSON file that needs to be registered manually after loaded asynchronously by AJAX.\n\nHere are two types of use examples:\n\n** JavaScript Introduction Example **\n\n```html\n<script src=\"echarts.js\"></script>\n<script src=\"map/js/china.js\"></script>\n<script>\nvar chart = echarts.init(document.getElementById('main'));\nchart.setOption({\n    series: [{\n        type: 'map',\n        map: 'china'\n    }]\n});\n</script>\n```\n\n** JSON Introduction Example **\n\n```js\n$.get('map/json/china.json', function (chinaJson) {\n    echarts.registerMap('china', chinaJson);\n    var chart = echarts.init(document.getElementById('main'));\n    chart.setOption({\n        series: [{\n            type: 'map',\n            map: 'china'\n        }]\n    });\n});\n```\n\nECharts uses the data in [geoJSON] (http://geojson.org/) format as the outline of the map. In addition, you can also obtain data in [geoJSON] (http://geojson.org/) format of the map by other means and register it in ECharts.\n\n\n"},{"type":["number"],"valide":[100],"name":"boxWidth","desc":"\n\nA 3D geographic coordinate system component width in a 3D scene. With [viewControl.distance](~geo3D.viewControl.distance) you can get the most appropriate display size.\n\n\n\nThe following image is a schematic diagram of `boxWidth`, `boxHeight`, `boxDepth`, `regionHeight` in A 3D geographic coordinate system component.\n\n\n![600xauto](~geo-size.png)\n\n\n"},{"type":["number"],"valide":[10],"name":"boxHeight","desc":"\n\nA 3D geographic coordinate system component height in a 3D scene.\n\n\nComponent height. This height contains the height of the bar and scatter on a 3D map.\n\n"},{"type":["number"],"valide":["auto"],"name":"boxDepth","desc":"\n\nA 3D geographic coordinate system component depth in a 3D scene.\n\n\nThe component depth defaults to automatic, ensuring that the scale of the 3D component is the same as the ratio of the input GeoJSON.\n\n\n"},{"type":["number"],"valide":[3],"name":"regionHeight","desc":"\n\nThe height of each area of the 3D map. This height is the height of the model, less than [boxHeight](~geo3D.boxHeight). `boxHeight - regionHeight` will be used for the display of 3D bar, 3D scatter, and etc.\n\n\n\n\n"},{"type":["string"],"valide":["'auto'"],"name":"environment","desc":"\n\nEnvironment map. Support for solid colors, gradual colors, URL of panoramic texture. The default is `'auto'`, which is used as the environment texture when [light.ambientCubemap.texture](~geo3D.light.ambientCubemap.texture) is configured. Otherwise, the environment texture is not displayed.\n\nExample: \n```js\n// Configure as a panoramic texture\nenvironment: 'asset/starfield.jpg'\n// Configured as a solid black background\nenvironment: '#000'\n// Configured as a background with a vertical gradient\nenvironment: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n  offset: 0, color: '#00aaff' // Sky color\n}, {\n  offset: 0.7, color: '#998866' // Ground color\n}, {\n  offset: 1, color: '#998866' // Ground color\n}], false)\n\n```\n\n\n"},{"type":["Object"],"valide":[],"name":"groundPlane","desc":"\n\nThe ground allows the entire assembly to be “placed” to make the entire scene look more realistic.\n\n `groundPlane` supports setting up separate `realisticMaterial`, `colorMaterial`, `lambertMaterial` and other materials. If not set, the material parameters of the component are taken by default.\n\n"},{"type":["boolean"],"valide":[],"name":"instancing","desc":"\n\n`instancing` will merge all the [geometry](http://geojson.org/geojson-spec.html#geometry-objects)  in GeoJSON into one. When GeoJSON has a lot of (thousands) [geometry](http://geojson.org/geojson-spec.html#geometry-objects), it can effectively improve drawing efficiency.\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nThe setting of the label.\n\n\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nVisual properties of 3D graphics in A 3D geographic coordinate system component, including color, transparency, strokes, etc.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"emphasis","desc":"\n\nGraphic and label styles when mouse hover is highlighted.\n"},{"type":["Array"],"valide":[],"name":"regions","desc":"\n\nThe setting of the map area.\n"},{"type":["string"],"valide":[],"name":"shading","desc":"\n\nThe coloring effect of 3D graphics in A 3D geographic coordinate system component. The following three coloring methods are supported in echarts-gl:\n\n+ `'color'`\nOnly display colors, not affected by other factors such as lighting.\n\n+ `'lambert'`\nThrough the classic [lambert] coloring, can express the light and dark that the light shows.\n\n+ `'realistic'`\nRealistic rendering, combined with [light.ambientCubemap](~globe.light.ambientCubemap) and [postEffect](~globe.postEffect), can improve the quality and texture of the display. [Physical Based Rendering (PBR)] (https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/) is used in ECharts GL to represent realistic materials.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"realisticMaterial","desc":"\n\nThe configuration item of the realistic material is valid when [shading](~geo3D.shading) is `'realistic'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"lambertMaterial","desc":"\n\nThe configuration item of the lambert material is valid when [shading](~geo3D.shading) is `'lambert'`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"colorMaterial","desc":"\n\nThe color material related configuration item is valid when [shading](~geo3D.shading) is `'color'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"light","desc":"\n\nLight related settings. Invalid when [shading](~geo3D.shading) is 'color'.\n\nThe lighting settings affect the components and all the charts on the component's coordinate system.\n\nA reasonable lighting setting can make the brightness and darkness of the whole scene richer and more layered.\n"},{"type":["Object"],"valide":[],"name":"postEffect","desc":"\n\nPost-processing effects related configuration. It can add effects such as highlights, depth of field, screen space ambient occlusion (SSAO), toning to the picture. And it can make the whole picture more textured.\n\nThe following are the differences between closing `postEffect` and opening `postEffect`.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-disable.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-enable.png\" width=\"100%\" title=\"Enable\">\n</div>\n\nNote that when postEffect is enable, [temporalSuperSampling](~geo3D.temporalSuperSampling) is enable by default. After the picture is still, the picture will continue to be enhanced, including anti-aliasing, depth of field, SSAO, shadows, etc.\n"},{"type":["Object"],"valide":[],"name":"temporalSuperSampling","desc":"\n\nTemporal supersampling. After opening [postEffect](~geo3D.postEffect), WebGL's default MSAA (MultiSampling Anti-Aliasing) will not work, so we need to solve the problem of sampling.\n\nTemporal supersampling is an anti-aliasing method. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated, thus achieving anti-aliasing effect.\nAnd in this process, ECharts-gl also progressively enhances some of the effects in [postEffect](~geo3D.postEffect) that require sampled guarantees. For example [SSAO](~geo3D.postEffect.SSAO), [Depth of Field](~geo3D.postEffect.depthOfField), and shadow.\n\nThe following is the difference between not opening `temporalSuperSampling` and opening `temporalSuperSampling`.\n\n<div class=\"twentytwenty-container\" style=\"width: 800px;\">\n    <img src=\"documents/asset/gl/img/surface-no-taa.png\" width=\"100%\" title=\"No AA\">\n    <img src=\"documents/asset/gl/img/surface-taa.png\" width=\"100%\" title=\"AA\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"viewControl","desc":"\n\n`viewControl` is used for mouse rotation, zooming, and other perspective control.\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n\n"},{"type":["string","number"],"valide":["auto"],"name":"left","desc":"\n\nDistance between  component and the left side of the container.\n\n`left` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'left'`, `'center'`, or `'right'`.\n\nIf the `left` value is set to be `'left'`, `'center'`, or `'right'`, then the component will be aligned automatically based on position.\n"},{"type":["string","number"],"valide":["auto"],"name":"top","desc":"\n\nDistance between  component and the top side of the container.\n\n`top` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'top'`, `'middle'`, or `'bottom'`.\n\nIf the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`, then the component will be aligned automatically based on position.\n"},{"type":["string","number"],"valide":["auto"],"name":"right","desc":"\n\nDistance between  component and the right side of the container.\n\n`right` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\n Adaptive by default.\n"},{"type":["string","number"],"valide":["auto"],"name":"bottom","desc":"\n\nDistance between  component and the bottom side of the container.\n\n`bottom` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\n Adaptive by default.\n\n"},{"type":["string","number"],"valide":["auto"],"name":"width","desc":"\n\n The width of the view of the component.\n"},{"type":["string","number"],"valide":["auto"],"name":"height","desc":"\n\n The height of the view of the component.\n\n\n\n\n\n\n\n\n\n"}],"geo3D.groundPlane":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the ground.\n"},{"type":["string"],"valide":["'#aaa'"],"name":"color","desc":"\n\nThe color of the ground.\n"}],"geo3D.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"geo3D.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n"}],"geo3D.itemStyle":[{"type":["string","Function"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe width of the border. With the border, you can distinguish each area more clearly. As shown below:\n\n![](~geo-border.png)\n"},{"type":["string"],"valide":["#333"],"name":"borderColor","desc":"\nThe color of the border.\n\n\n\n"}],"geo3D.emphasis.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"geo3D.emphasis.label.textStyle":[{"type":["string"],"valide":["#000"],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n"}],"geo3D.emphasis":[{"type":["Object"],"valide":[],"name":"label","desc":"\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\n\n"}],"geo3D.emphasis.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"geo3D.regions":[{"type":["string"],"valide":[],"name":"name","desc":"\nThe name of the corresponding map area, such as `'Guangdong'`, `'Zhejiang'`.\n\n\n"},{"type":["number"],"valide":[],"name":"regionHeight","desc":"\n\nThe height of the area. Different heights can be set to express the size of the data. When GeoJSON is the data of the building, this value can also be used to represent the approximate height. As shown below：\n\n\n![700xauto](~city-region-height.jpg)\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nStyle settings for a single area.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nLabel settings for a single area.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"emphasis","desc":"\n\nSetting the highlight for labels and styles for a single area.\n"}],"geo3D.regions.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe width of the border. With the border, you can distinguish each area more clearly. As shown below:\n\n![](~geo-border.png)\n"},{"type":["string"],"valide":["#333"],"name":"borderColor","desc":"\nThe color of the border.\n\n\n\n"}],"geo3D.regions.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"geo3D.regions.label.textStyle":[{"type":["string"],"valide":["#000"],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n"}],"geo3D.regions.emphasis.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe width of the border. With the border, you can distinguish each area more clearly. As shown below:\n\n![](~geo-border.png)\n"},{"type":["string"],"valide":["#333"],"name":"borderColor","desc":"\nThe color of the border.\n\n\n\n"}],"geo3D.regions.emphasis":[{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\n\n\n\n"}],"geo3D.regions.emphasis.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"geo3D.regions.emphasis.label.textStyle":[{"type":["string"],"valide":["#000"],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n\n\n\n"}],"geo3D.realisticMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0.5],"name":"roughness","desc":"\n\nThe `roughness` attribute is used to indicate the roughness of the material, `0` is completely smooth, `1` is completely rough, and the middle value is between the two.\n\n\nThe following images show the effect of `roughness` in `globe](~globe) `0.2` (smooth) and `0.8` (rough).\n\n![autox280](~globe-gloss.png)\n![autox280](~globe-rough.png)\n\n\nWhen you want to express more complex materials. You can set `roughness` directly to the texture that stores the roughness with each pixel as follows.\n\n![300x300](~roughness.png)\n\nThe more white the color in the texture, the larger the value and the rougher it is. You can get texture resources of different materials from resource websites such as [http://freepbr.com/] (http://freepbr.com/). You can also generate it yourself using other tools.\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0],"name":"metalness","desc":"\n\nThe `metalness` attribute is used to indicate whether the material is metal or non-metal, `0` is non-metallic, `1` is metal, and the middle value is between the two. Usually set to `0` and `1` to meet most of the scenes.\n\n\nThe picture below show the difference between `metal' and '0' in [globe](~globe).\n\n![autox280](~globe-metal.png)\n![autox280](~globe-non-metal.png)\n\n\nAs with [roughness](~geo3D.realisticMaterial.roughness) you can set `metalness` directly to the metal texture.\n"},{"type":["number"],"valide":[0.5],"name":"roughnessAdjust","desc":"\n\nRoughness adjustment is useful when using roughness map. The overall roughness of the texture can be adjusted. The default is `0.5`, `0` is completely smooth, `1` is completely rough.\n"},{"type":["number"],"valide":[0.5],"name":"metalnessAdjust","desc":"\n\nMetalness adjustment is useful when using metalness maps. The overall metallicity of the texture can be adjusted. The default is `0.5`, `0` is non-metal, `1` is metal.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"normalTexture","desc":"\n\nNormal map of material details.\n\nUsing normal maps, you can still display rich shades of detail on the surface of the object with fewer vertices.\n\n"}],"geo3D.lambertMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"}],"geo3D.colorMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n\n\n\n\n\n"}],"geo3D.light.main":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of the main light source.\n\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of the main light source.\n"},{"type":["boolean"],"valide":[],"name":"shadow","desc":"\n\nWhether the main light source displays a shadow. The default is off.\n\nTurning on the shadows can bring more realistic and layered lighting to the scene. But it also increases the operating overhead of the program.\n\nThe following two images show the difference between turning on the shadow and turning off the shadow.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow.png\" width=\"100%\" title=\"Shadow\">\n    <img src=\"documents/asset/gl/img/geo-no-shadow.png\" width=\"100%\" title=\"No Shadow\">\n</div>\n"},{"type":["string"],"valide":["'medium'"],"name":"shadowQuality","desc":"\n\nThe quality of the shadow. You can choose `'low'`, `'medium'`, `'high'`, `'ultra'`\n\nThe following two images shows the difference between low quality and high quality shadows.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow-low.png\" width=\"100%\" title=\"Low\">\n    <img src=\"documents/asset/gl/img/geo-shadow-high.png\" width=\"100%\" title=\"High\">\n</div>\n"},{"type":["number"],"valide":[40],"name":"alpha","desc":"\n\nThe main light source is around the x-axis, which is the angle of up-down rotation. Control the direction of the light with [beta](~geo3D.light.main.beta).\n\nAs the following image show:\n\n![](~light-alpha-beta.png)\n\nThe [globe](~globe) component can control the time of sunlight by [time](~globe.light.main.time).\n"},{"type":["number"],"valide":[40],"name":"beta","desc":"\n\nThe main light source is around the y-axis, which is the angle of the left-right rotation.\n\n\n\n\n"}],"geo3D.light":[{"type":["Object"],"valide":[],"name":"main","desc":"\n\nThe setting of the main light source of the scene. In the [globe](~globe) component is the sun.\n"},{"type":["Object"],"valide":[],"name":"ambient","desc":"\n\nGlobal ambient light settings.\n"},{"type":["Object"],"valide":[],"name":"ambientCubemap","desc":"\n\nThe ambientCubemap uses texture as the source of ambient light, which provides diffuse and specular for objects. The diffuse and specular can be set separately by [diffuseIntensity](~geo3D.light.ambientCubemap.diffuseIntensity) and [specularIntensity](~geo3D.light.ambientCubemap.specularIntensity).\n\n"}],"geo3D.light.ambient":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of ambient light.\n"},{"type":["number"],"valide":[0.2],"name":"intensity","desc":"\n\nThe intensity of ambient light.\n"}],"geo3D.light.ambientCubemap":[{"type":["string"],"valide":[],"name":"texture","desc":"\n\nThe URL of the ambient cubemap supports HDR images in the `.hdr` format. You can obtained the resources for `.hdr` from http://www.hdrlabs.com/sibl/archive.html and other websites.\n\nExample：\n\n```js\nambientCubemap: {\n    texture: 'pisa.hdr',\n    // The exposure value used when analytic hdr\n    exposure: 1.0\n}\n```\n"},{"type":["number"],"valide":[0.5],"name":"diffuseIntensity","desc":"\n\nThe intensity of diffuse.\n"},{"type":["number"],"valide":[0.5],"name":"specularIntensity","desc":"\n\nThe intensity of specular.\n\n\n\n\n\n"}],"geo3D.postEffect":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable post-processing effects. Not enabled by default.\n"},{"type":["Object"],"valide":[],"name":"bloom","desc":"\n\nBloom is used to reproducing the effects that occur in real cameras when taking pictures in a bright environment.\nBecause traditional RGB can only represent colors in the range of '0 - 255', so we need to use the bloom effect simulates fringes of light extending from the borders of bright areas, creating the illusion of a bright light overwhelming the camera. As shown below：\n\n![](~globe-posteffect-bloom.png)\n"},{"type":["Object"],"valide":[],"name":"depthOfField","desc":"\n\nDepth of Field is a post-processing effect that simulates the focus properties of a camera. The area of focus is clear, and the area away from the focus is gradually blurred.\n\nThe depth of field effect allows the observer to focus on the area of focus and make the picture feel stronger. Large depth of field can also create a macro model effect.\n\nThe following are the differences between turning off and turning on the depth of field effect.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-dof.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/geo-dof.png\" width=\"100%\" title=\"Enable\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"screenSpaceAmbientOcclusion","desc":"\n\n\nThe ambient occlusion post-processing effect darkens the corners, holes, crevices, and areas where most light can`t reach. It is a supplement to the traditional shadow map, which makes the whole scene more natural and layered.\n\nBelow is a comparison of the effects of no SSAO and SSAO:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-ssao.png\" width=\"100%\" title=\"No SSAO\">\n    <img src=\"documents/asset/gl/img/geo-ssao.png\" width=\"100%\" title=\"SSAO\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"SSAO","desc":"\n\nSame as [screenSpaceAmbientOcclusion](~geo3D.postEffect.screenSpaceAmbientOcclusion)\n\n"},{"type":["Object"],"valide":[],"name":"colorCorrection","desc":"\n\nColor correction and adjustment. Similar to Color Adjustments in Photoshop.\n\nThe same scene in the figure below is adjusted to the difference between the cool color system and the warm color system.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/buildings-cold.jpg\" width=\"100%\" title=\"Cold\">\n    <img src=\"documents/asset/gl/img/buildings-warm.jpg\" width=\"100%\" title=\"Warm\">\n</div>\n\n"},{"type":["Object"],"valide":[],"name":"FXAA","desc":"\n\nAfter opening [postEffect](~geo3D.postEffect), WebGL's default MSAA (Multi Sampling Anti Aliasing) will not work. At this time, FXAA (Fast Approximate Anti-Aliasing) can solve the anti-aliasing problem quickly and easily. FXAA blurs the edge of the scene to solve the problem of aliasing. It works well on some scenes, but in echarts-gl, you need to ensure that the edges of many texts and lines are sharp and clear, so FXAA is not suitable. At this point we can use supersampling by setting a higher `devicePixelRatio` as follows:\n\n```js\nvar chart = echarts.init(dom, null, {\n    devicePixelRatio: 2\n})\n```\n\nHowever, setting a higher `devicePixelRatio` has high requirements for computer performance, so more often we recommend using [temporalSuperSampling](~geo3D.temporalSuperSampling) in echarts-gl. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated.,thus achieving anti-aliasing effect.\n"}],"geo3D.postEffect.bloom":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the bloom effect.\n"},{"type":["number"],"valide":[0.1],"name":"bloomIntensity","desc":"\n\nThe intensity of the bloom. The default is 0.1.\n"}],"geo3D.postEffect.depthOfField":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the depth of field.\n"},{"type":["boolean"],"valide":[50],"name":"focalDistance","desc":"\n\nThe initial focus distance. The user can click on the area to automatically focus.\n"},{"type":["boolean"],"valide":[20],"name":"focalRange","desc":"\n\nThe size of the in-focus area. The objects in this range are completely clear and there is no blurring.\n\n"},{"type":["number"],"valide":[2.8],"name":"fstop","desc":"\n\n[F value] of the lens (https://zh.wikipedia.org/wiki/%E7%84%A6%E6%AF%94), the smaller the value, the shallower the depth of field.\n"},{"type":["number"],"valide":[10],"name":"blurRadius","desc":"\n\nBlur radius outside the focus.\n\nThe difference blur effect between the different radius. \n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-dof-small.png\" width=\"100%\" title=\"blurSize: 3\">\n    <img src=\"documents/asset/gl/img/geo-dof-large.png\" width=\"100%\" title=\"blurSize: 10\">\n</div>\n"}],"geo3D.postEffect.SSAO":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable SSAO (screen space ambient occlusion). Not enabled by default.\n"},{"type":["string"],"valide":["'medium'"],"name":"quality","desc":"\n\nThe quality of SSAO (screen space ambient occlusion). Supporting`'low'`, `'medium'`, `'high'`, `'ultra'`\n"},{"type":["number"],"valide":[2],"name":"radius","desc":"\n\nThe radius of the SSAO (screen space ambient occlusion). The larger the radius, the more natural the effect, but you need to set a higher `'quality'`. \n\nThe following example is the difference between a smaller and larger radius:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-ssao-small-radius.png\" width=\"100%\" title=\"Radius: 1\">\n    <img src=\"documents/asset/gl/img/geo-ssao-large-radius.png\" width=\"100%\" title=\"Radius: 10\">\n</div>\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of SSAO (screen space ambient occlusion). The larger the value, the darker the color.\n\n"}],"geo3D.postEffect.colorCorrection":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the color correction.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"lookupTexture","desc":"\n\nColor correction lookup texture, recommended.\n\nThe color correction lookup texture is a texture image like the one below.\n\n![200xauto](~lookup.png)\n\nThis is the basic lookup texture image that you can use directly.\nTo adjust the color of the scene to the effect you want, you can take a screenshot of the scene and adjust the color to the desired effect in image processing software such as Photoshop. Then apply the same adjustment to the image of the lookup texture above.\n\nFor example, after turning into a cool tone, the image of the lookup texture will look like this:\n\n![200xauto](~crispwinter.png)\n\nThen the texture image is used as the value of the configuration item, and you can get the same effect in Photoshop.\n\nOf course, if you just want to get a screenshot, you don't have to do it anymore, but if you want to easily adjust to the ideal color in real-time interactive works, this is very useful.\n"},{"type":["number"],"valide":[0],"name":"exposure","desc":"\n\nThe exposure of the image.\n"},{"type":["number"],"valide":[0],"name":"brightness","desc":"\n\nThe brightness of the image.\n"},{"type":["number"],"valide":[1],"name":"contrast","desc":"\n\nThe contrast of the image.\n"},{"type":["number"],"valide":[1],"name":"saturation","desc":"\n\nThe saturation of the image.\n\n\n"}],"geo3D.postEffect.FXAA":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable FXAA. Not enabled by default.\n\n\n\n\n\n\n\n"}],"geo3D.temporalSuperSampling":[{"type":["boolean"],"valide":["'auto'"],"name":"enable","desc":"\n\nWhether to enable temporal supersampling. By default, temporal supersampling is also turned on synchronously when [postEffect] (~geo3D.postEffect) is turned on.\n\n\n\n\n"}],"geo3D.viewControl":[{"type":["string"],"valide":["perspective"],"name":"projection","desc":"\n\nThe way of projection, the default is `'perspective'` projection, also supports setting to `'orthogonal'` projection.\n\n"},{"type":["boolean"],"valide":[],"name":"autoRotate","desc":"\n\nWhether to enable the angle of view to automatically rotate around the object.\n"},{"type":["string"],"valide":["cw"],"name":"autoRotateDirection","desc":"\n\nThe direction in which the object auto rotates. The default is `'cw'` means clockwise from top to bottom, and can also use  `'ccw'` means counterclockwise from top to bottom.\n"},{"type":["number"],"valide":[10],"name":"autoRotateSpeed","desc":"\n\nThe speed at which the object auto rotates. The unit is `angle/second`, the default is `10`, which is a turn of `36` seconds.\n\n"},{"type":["number"],"valide":[3],"name":"autoRotateAfterStill","desc":"\n\nThe time interval for automatic rotation to resume after the mouse is still. Valid after opening [autoRotate](~geo3D.viewControl.autoRotate).\n\n"},{"type":["number"],"valide":[0.8],"name":"damping","desc":"\n\nThe damping when the mouse is rotated, zoomed, etc.\nWhen it is greater than 0, the angle of view will continue to move (rotate and zoom) due to certain inertia after the mouse is still.\n\n\n"},{"type":["number","Array"],"valide":[1],"name":"rotateSensitivity","desc":"\n\nThe sensitivity of the rotation operation. The greater the value, the more sensitive. Supports the use of arrays to set the horizontal and vertical rotation sensitivity separately.\n\n\nThe default is `1`.\n\nCannot be rotated after setting to `0`.\n\n```js\n// can't rotate\nrotateSensitivity: 0\n// can only be rotated horizontally\nrotateSensitivity: [1, 0]\n//  can only rotate vertically\nrotateSensitivity: [0, 1]\n```\n"},{"type":["number"],"valide":[1],"name":"zoomSensitivity","desc":"\n\nThe sensitivity of the zoom operation, the larger the value, the more sensitive. The default is `1`.\n\nCan`t be scaled after setting to `0`.\n"},{"type":["number"],"valide":[1],"name":"panSensitivity","desc":"\n\nThe sensitivity of the panning operation, the greater the value, the more sensitive. Supports the use of arrays to set the horizontal and vertical translation sensitivity.\n\nThe default is `1`.\n\nCannot pan after setting to `0`.\n"},{"type":["string"],"valide":["left"],"name":"panMouseButton","desc":"\n\nThe mouse button used for panning operation supports:\n\n+ `'left'` left mouse button (default)\n\n+ `'middle'` middle mouse button\n\n+ `'right'` right mouse button\n\nNote: If set to the right mouse button, the default context menu will be blocked.\n"},{"type":["string"],"valide":["middle"],"name":"rotateMouseButton","desc":"\n\nThe mouse button used for the rotation operation supports:\n\n+ `'left'` left mouse button\n\n+ `'middle'` middle mouse button (default)\n\n+ `'right'` right mouse button\n\nNote: If set to the right mouse button, the default context menu will be blocked.\n"},{"type":["number"],"valide":[100],"name":"distance","desc":"\n\nThe distance of the default perspective from the subject. For [globe](~globe), the distance from the Earth's surface is the distance from the center origin for other components such as [grid3D](~grid3D) and [geo3D](~geo3D). Valid when [projection](~geo3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[40],"name":"minDistance","desc":"\n\nThe angle of view is controlled by the mouse to bring the minimum distance to the subject. Valid when [projection](~geo3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[400],"name":"maxDistance","desc":"\n\nThe angle of view can be extended to the maximum distance of the subject by mouse control. Valid when [projection](~geo3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[100],"name":"orthographicSize","desc":"\n\nThe size of the orthogonal projection. Valid when [projection](~geo3D.viewControl.projection) is `'orthographic'`.\n\n"},{"type":["number"],"valide":[20],"name":"maxOrthographicSize","desc":"\n\nThe maximum value of the orthogonal projection scaling. Valid when [projection](~geo3D.viewControl.projection) is `'orthographic'`.\n"},{"type":["number"],"valide":[400],"name":"minOrthographicSize","desc":"\n\nThe minimum value of the orthogonal projection scaling. Valid when [projection](~geo3D.viewControl.projection) is `'orthographic'`\n"},{"type":["number"],"valide":[40],"name":"alpha","desc":"\n\nThe angle of view is around the x-axis, which is the angle of rotation up and down. With [beta](~geo3D.light.main.beta) you can control the direction of the perspective.\n\nAs shown below：\n\n![](~view-alpha-beta.png)\n"},{"type":["number"],"valide":[0],"name":"beta","desc":"\n\nThe angle of view is around the y-axis, which is the angle of rotation from left to right.\n"},{"type":["Array"],"valide":[],"name":"center","desc":"\n\nAt the center of the angle of view, the rotation will also rotate around this center point. The default is `[0,0,0]`.\n"},{"type":["number"],"valide":[5],"name":"minAlpha","desc":"\n\nThe minimum alpha value to rotate up and down. That is, the angle of view can be rotated to reach the uppermost angle.\n"},{"type":["number"],"valide":[90],"name":"maxAlpha","desc":"\n\nThe maximum alpha value to rotate up and down. That is, the angle of view can be rotated to the lowest angle.\n"},{"type":["number"],"valide":[-80],"name":"minBeta","desc":"\n\nThe minimum beta value to rotate left and right. That is, the angle of view can be rotated to the leftmost angle.\n"},{"type":["number"],"valide":[80],"name":"maxBeta","desc":"\n\nThe maximum beta value to rotate left and right rotation. That is, the angle of view can be rotated to the rightmost angle.\n\n\n"},{"type":["boolean"],"valide":[],"name":"animation","desc":"\n\nWhether to enable animation.\n"},{"type":["number"],"valide":[1000],"name":"animationDurationUpdate","desc":"\n\nThe duration time for update the transition animation.\n"},{"type":["string"],"valide":["cubicInOut"],"name":"animationEasingUpdate","desc":"\n\nThe easing effect for update transition animation.\n\n\n\n\n\n\n\n"}],"mapbox3D":[{"type":["string","Object"],"valide":[],"name":"style","desc":"\n\nSets the style of the Mapbox map. Same as [https://www.mapbox.com/mapbox-gl-js/style-spec/](https://www.mapbox.com/mapbox-gl-js/style-spec/).\n"},{"type":["Array"],"valide":[],"name":"center","desc":"\n\nSets the longitude and latitude of the center of the map. Longitude and latitude are represented by arrays, for example:\n\n```js\nmapbox3D: {\n    center: [104.114129, 37.550339],\n    zoom: 3\n}\n```\n"},{"type":["number"],"valide":[],"name":"zoom","desc":"\n\nSets the zoom level of the map. See [https://www.mapbox.com/mapbox-gl-js/style-spec/#root-zoom](https://www.mapbox.com/mapbox-gl-js/style-spec/#root-zoom)\n"},{"type":["number"],"valide":[0],"name":"bearing","desc":"\n\nSets the bearing angle of the map. See [https://www.mapbox.com/mapbox-gl-js/style-spec/#root-bearing](https://www.mapbox.com/mapbox-gl-js/style-spec/#root-bearing)\n"},{"type":["number"],"valide":[0],"name":"pitch","desc":"\nSets the pitch angle of the map. The default is `0` means perpendicular to the surface of the map. The greater value is `60`. See [https://www.mapbox.com/mapbox-gl-js/style-spec/#root-pitch](https://www.mapbox.com/mapbox-gl-js/style-spec/#root-pitch)\n"},{"type":["number"],"valide":[1],"name":"altitudeScale","desc":"\n\nThe zoom of the altitude Scale.\n\n\n"},{"type":["string"],"valide":[],"name":"shading","desc":"\n\nThe coloring effect of 3D graphics in mapbox3D. The following three coloring methods are supported in echarts-gl:\n\n+ `'color'`\nOnly display colors, not affected by other factors such as lighting.\n\n+ `'lambert'`\nThrough the classic [lambert] coloring, can express the light and dark that the light shows.\n\n+ `'realistic'`\nRealistic rendering, combined with [light.ambientCubemap](~globe.light.ambientCubemap) and [postEffect](~globe.postEffect), can improve the quality and texture of the display. [Physical Based Rendering (PBR)] (https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/) is used in ECharts GL to represent realistic materials.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"realisticMaterial","desc":"\n\nThe configuration item of the realistic material is valid when [shading](~mapbox3D.shading) is `'realistic'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"lambertMaterial","desc":"\n\nThe configuration item of the lambert material is valid when [shading](~mapbox3D.shading) is `'lambert'`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"colorMaterial","desc":"\n\nThe color material related configuration item is valid when [shading](~mapbox3D.shading) is `'color'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"light","desc":"\n\nLight related settings. Invalid when [shading](~mapbox3D.shading) is 'color'.\n\nThe lighting settings affect the components and all the charts on the component's coordinate system.\n\nA reasonable lighting setting can make the brightness and darkness of the whole scene richer and more layered.\n"},{"type":["Object"],"valide":[],"name":"postEffect","desc":"\n\nPost-processing effects related configuration. It can add effects such as highlights, depth of field, screen space ambient occlusion (SSAO), toning to the picture. And it can make the whole picture more textured.\n\nThe following are the differences between closing `postEffect` and opening `postEffect`.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-disable.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-enable.png\" width=\"100%\" title=\"Enable\">\n</div>\n\nNote that when postEffect is enable, [temporalSuperSampling](~mapbox3D.temporalSuperSampling) is enable by default. After the picture is still, the picture will continue to be enhanced, including anti-aliasing, depth of field, SSAO, shadows, etc.\n"},{"type":["Object"],"valide":[],"name":"temporalSuperSampling","desc":"\n\nTemporal supersampling. After opening [postEffect](~mapbox3D.postEffect), WebGL's default MSAA (MultiSampling Anti-Aliasing) will not work, so we need to solve the problem of sampling.\n\nTemporal supersampling is an anti-aliasing method. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated, thus achieving anti-aliasing effect.\nAnd in this process, ECharts-gl also progressively enhances some of the effects in [postEffect](~mapbox3D.postEffect) that require sampled guarantees. For example [SSAO](~mapbox3D.postEffect.SSAO), [Depth of Field](~mapbox3D.postEffect.depthOfField), and shadow.\n\nThe following is the difference between not opening `temporalSuperSampling` and opening `temporalSuperSampling`.\n\n<div class=\"twentytwenty-container\" style=\"width: 800px;\">\n    <img src=\"documents/asset/gl/img/surface-no-taa.png\" width=\"100%\" title=\"No AA\">\n    <img src=\"documents/asset/gl/img/surface-taa.png\" width=\"100%\" title=\"AA\">\n</div>\n"}],"mapbox3D.realisticMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0.5],"name":"roughness","desc":"\n\nThe `roughness` attribute is used to indicate the roughness of the material, `0` is completely smooth, `1` is completely rough, and the middle value is between the two.\n\n\nThe following images show the effect of `roughness` in `globe](~globe) `0.2` (smooth) and `0.8` (rough).\n\n![autox280](~globe-gloss.png)\n![autox280](~globe-rough.png)\n\n\nWhen you want to express more complex materials. You can set `roughness` directly to the texture that stores the roughness with each pixel as follows.\n\n![300x300](~roughness.png)\n\nThe more white the color in the texture, the larger the value and the rougher it is. You can get texture resources of different materials from resource websites such as [http://freepbr.com/] (http://freepbr.com/). You can also generate it yourself using other tools.\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0],"name":"metalness","desc":"\n\nThe `metalness` attribute is used to indicate whether the material is metal or non-metal, `0` is non-metallic, `1` is metal, and the middle value is between the two. Usually set to `0` and `1` to meet most of the scenes.\n\n\nThe picture below show the difference between `metal' and '0' in [globe](~globe).\n\n![autox280](~globe-metal.png)\n![autox280](~globe-non-metal.png)\n\n\nAs with [roughness](~mapbox3D.realisticMaterial.roughness) you can set `metalness` directly to the metal texture.\n"},{"type":["number"],"valide":[0.5],"name":"roughnessAdjust","desc":"\n\nRoughness adjustment is useful when using roughness map. The overall roughness of the texture can be adjusted. The default is `0.5`, `0` is completely smooth, `1` is completely rough.\n"},{"type":["number"],"valide":[0.5],"name":"metalnessAdjust","desc":"\n\nMetalness adjustment is useful when using metalness maps. The overall metallicity of the texture can be adjusted. The default is `0.5`, `0` is non-metal, `1` is metal.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"normalTexture","desc":"\n\nNormal map of material details.\n\nUsing normal maps, you can still display rich shades of detail on the surface of the object with fewer vertices.\n\n"}],"mapbox3D.lambertMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"}],"mapbox3D.colorMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n\n\n\n\n\n"}],"mapbox3D.light.main":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of the main light source.\n\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of the main light source.\n"},{"type":["boolean"],"valide":[],"name":"shadow","desc":"\n\nWhether the main light source displays a shadow. The default is off.\n\nTurning on the shadows can bring more realistic and layered lighting to the scene. But it also increases the operating overhead of the program.\n\nThe following two images show the difference between turning on the shadow and turning off the shadow.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow.png\" width=\"100%\" title=\"Shadow\">\n    <img src=\"documents/asset/gl/img/geo-no-shadow.png\" width=\"100%\" title=\"No Shadow\">\n</div>\n"},{"type":["string"],"valide":["'medium'"],"name":"shadowQuality","desc":"\n\nThe quality of the shadow. You can choose `'low'`, `'medium'`, `'high'`, `'ultra'`\n\nThe following two images shows the difference between low quality and high quality shadows.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow-low.png\" width=\"100%\" title=\"Low\">\n    <img src=\"documents/asset/gl/img/geo-shadow-high.png\" width=\"100%\" title=\"High\">\n</div>\n"},{"type":["number"],"valide":[40],"name":"alpha","desc":"\n\nThe main light source is around the x-axis, which is the angle of up-down rotation. Control the direction of the light with [beta](~mapbox3D.light.main.beta).\n\nAs the following image show:\n\n![](~light-alpha-beta.png)\n\nThe [globe](~globe) component can control the time of sunlight by [time](~globe.light.main.time).\n"},{"type":["number"],"valide":[40],"name":"beta","desc":"\n\nThe main light source is around the y-axis, which is the angle of the left-right rotation.\n\n\n\n\n"}],"mapbox3D.light":[{"type":["Object"],"valide":[],"name":"main","desc":"\n\nThe setting of the main light source of the scene. In the [globe](~globe) component is the sun.\n"},{"type":["Object"],"valide":[],"name":"ambient","desc":"\n\nGlobal ambient light settings.\n"},{"type":["Object"],"valide":[],"name":"ambientCubemap","desc":"\n\nThe ambientCubemap uses texture as the source of ambient light, which provides diffuse and specular for objects. The diffuse and specular can be set separately by [diffuseIntensity](~mapbox3D.light.ambientCubemap.diffuseIntensity) and [specularIntensity](~mapbox3D.light.ambientCubemap.specularIntensity).\n\n"}],"mapbox3D.light.ambient":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of ambient light.\n"},{"type":["number"],"valide":[0.2],"name":"intensity","desc":"\n\nThe intensity of ambient light.\n"}],"mapbox3D.light.ambientCubemap":[{"type":["string"],"valide":[],"name":"texture","desc":"\n\nThe URL of the ambient cubemap supports HDR images in the `.hdr` format. You can obtained the resources for `.hdr` from http://www.hdrlabs.com/sibl/archive.html and other websites.\n\nExample：\n\n```js\nambientCubemap: {\n    texture: 'pisa.hdr',\n    // The exposure value used when analytic hdr\n    exposure: 1.0\n}\n```\n"},{"type":["number"],"valide":[0.5],"name":"diffuseIntensity","desc":"\n\nThe intensity of diffuse.\n"},{"type":["number"],"valide":[0.5],"name":"specularIntensity","desc":"\n\nThe intensity of specular.\n\n\n\n\n\n"}],"mapbox3D.postEffect":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable post-processing effects. Not enabled by default.\n"},{"type":["Object"],"valide":[],"name":"bloom","desc":"\n\nBloom is used to reproducing the effects that occur in real cameras when taking pictures in a bright environment.\nBecause traditional RGB can only represent colors in the range of '0 - 255', so we need to use the bloom effect simulates fringes of light extending from the borders of bright areas, creating the illusion of a bright light overwhelming the camera. As shown below：\n\n![](~globe-posteffect-bloom.png)\n"},{"type":["Object"],"valide":[],"name":"depthOfField","desc":"\n\nDepth of Field is a post-processing effect that simulates the focus properties of a camera. The area of focus is clear, and the area away from the focus is gradually blurred.\n\nThe depth of field effect allows the observer to focus on the area of focus and make the picture feel stronger. Large depth of field can also create a macro model effect.\n\nThe following are the differences between turning off and turning on the depth of field effect.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-dof.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/geo-dof.png\" width=\"100%\" title=\"Enable\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"screenSpaceAmbientOcclusion","desc":"\n\n\nThe ambient occlusion post-processing effect darkens the corners, holes, crevices, and areas where most light can`t reach. It is a supplement to the traditional shadow map, which makes the whole scene more natural and layered.\n\nBelow is a comparison of the effects of no SSAO and SSAO:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-ssao.png\" width=\"100%\" title=\"No SSAO\">\n    <img src=\"documents/asset/gl/img/geo-ssao.png\" width=\"100%\" title=\"SSAO\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"SSAO","desc":"\n\nSame as [screenSpaceAmbientOcclusion](~mapbox3D.postEffect.screenSpaceAmbientOcclusion)\n\n"},{"type":["Object"],"valide":[],"name":"colorCorrection","desc":"\n\nColor correction and adjustment. Similar to Color Adjustments in Photoshop.\n\nThe same scene in the figure below is adjusted to the difference between the cool color system and the warm color system.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/buildings-cold.jpg\" width=\"100%\" title=\"Cold\">\n    <img src=\"documents/asset/gl/img/buildings-warm.jpg\" width=\"100%\" title=\"Warm\">\n</div>\n\n"},{"type":["Object"],"valide":[],"name":"FXAA","desc":"\n\nAfter opening [postEffect](~mapbox3D.postEffect), WebGL's default MSAA (Multi Sampling Anti Aliasing) will not work. At this time, FXAA (Fast Approximate Anti-Aliasing) can solve the anti-aliasing problem quickly and easily. FXAA blurs the edge of the scene to solve the problem of aliasing. It works well on some scenes, but in echarts-gl, you need to ensure that the edges of many texts and lines are sharp and clear, so FXAA is not suitable. At this point we can use supersampling by setting a higher `devicePixelRatio` as follows:\n\n```js\nvar chart = echarts.init(dom, null, {\n    devicePixelRatio: 2\n})\n```\n\nHowever, setting a higher `devicePixelRatio` has high requirements for computer performance, so more often we recommend using [temporalSuperSampling](~mapbox3D.temporalSuperSampling) in echarts-gl. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated.,thus achieving anti-aliasing effect.\n"}],"mapbox3D.postEffect.bloom":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the bloom effect.\n"},{"type":["number"],"valide":[0.1],"name":"bloomIntensity","desc":"\n\nThe intensity of the bloom. The default is 0.1.\n"}],"mapbox3D.postEffect.depthOfField":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the depth of field.\n"},{"type":["boolean"],"valide":[50],"name":"focalDistance","desc":"\n\nThe initial focus distance. The user can click on the area to automatically focus.\n"},{"type":["boolean"],"valide":[20],"name":"focalRange","desc":"\n\nThe size of the in-focus area. The objects in this range are completely clear and there is no blurring.\n\n"},{"type":["number"],"valide":[2.8],"name":"fstop","desc":"\n\n[F value] of the lens (https://zh.wikipedia.org/wiki/%E7%84%A6%E6%AF%94), the smaller the value, the shallower the depth of field.\n"},{"type":["number"],"valide":[10],"name":"blurRadius","desc":"\n\nBlur radius outside the focus.\n\nThe difference blur effect between the different radius. \n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-dof-small.png\" width=\"100%\" title=\"blurSize: 3\">\n    <img src=\"documents/asset/gl/img/geo-dof-large.png\" width=\"100%\" title=\"blurSize: 10\">\n</div>\n"}],"mapbox3D.postEffect.SSAO":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable SSAO (screen space ambient occlusion). Not enabled by default.\n"},{"type":["string"],"valide":["'medium'"],"name":"quality","desc":"\n\nThe quality of SSAO (screen space ambient occlusion). Supporting`'low'`, `'medium'`, `'high'`, `'ultra'`\n"},{"type":["number"],"valide":[2],"name":"radius","desc":"\n\nThe radius of the SSAO (screen space ambient occlusion). The larger the radius, the more natural the effect, but you need to set a higher `'quality'`. \n\nThe following example is the difference between a smaller and larger radius:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-ssao-small-radius.png\" width=\"100%\" title=\"Radius: 1\">\n    <img src=\"documents/asset/gl/img/geo-ssao-large-radius.png\" width=\"100%\" title=\"Radius: 10\">\n</div>\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of SSAO (screen space ambient occlusion). The larger the value, the darker the color.\n\n"}],"mapbox3D.postEffect.colorCorrection":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the color correction.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"lookupTexture","desc":"\n\nColor correction lookup texture, recommended.\n\nThe color correction lookup texture is a texture image like the one below.\n\n![200xauto](~lookup.png)\n\nThis is the basic lookup texture image that you can use directly.\nTo adjust the color of the scene to the effect you want, you can take a screenshot of the scene and adjust the color to the desired effect in image processing software such as Photoshop. Then apply the same adjustment to the image of the lookup texture above.\n\nFor example, after turning into a cool tone, the image of the lookup texture will look like this:\n\n![200xauto](~crispwinter.png)\n\nThen the texture image is used as the value of the configuration item, and you can get the same effect in Photoshop.\n\nOf course, if you just want to get a screenshot, you don't have to do it anymore, but if you want to easily adjust to the ideal color in real-time interactive works, this is very useful.\n"},{"type":["number"],"valide":[0],"name":"exposure","desc":"\n\nThe exposure of the image.\n"},{"type":["number"],"valide":[0],"name":"brightness","desc":"\n\nThe brightness of the image.\n"},{"type":["number"],"valide":[1],"name":"contrast","desc":"\n\nThe contrast of the image.\n"},{"type":["number"],"valide":[1],"name":"saturation","desc":"\n\nThe saturation of the image.\n\n\n"}],"mapbox3D.postEffect.FXAA":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable FXAA. Not enabled by default.\n\n\n\n\n\n\n\n"}],"mapbox3D.temporalSuperSampling":[{"type":["boolean"],"valide":["'auto'"],"name":"enable","desc":"\n\nWhether to enable temporal supersampling. By default, temporal supersampling is also turned on synchronously when [postEffect] (~mapbox3D.postEffect) is turned on.\n\n\n\n\n\n"}],"grid3D":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nWhether to display a 3D cartesian coordinate system component.\n\n\n\n"},{"type":["number"],"valide":[100],"name":"boxWidth","desc":"\n\n3D cartesian coordinate system width in a 3D scene. With [viewControl.distance](~grid3D.viewControl.distance) you can get the most appropriate display size.\n\n\n\n"},{"type":["number"],"valide":[100],"name":"boxHeight","desc":"\n\n3D cartesian coordinate system height in a 3D scene.\n\n\n\n"},{"type":["number"],"valide":[100],"name":"boxDepth","desc":"\n\n3D cartesian coordinate system depth in a 3D scene.\n\n\n\n\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"axisLine","desc":"\nSettings related to axis line."},{"type":["Object"],"valide":[],"name":"axisLabel","desc":"\nSettings related to axis label."},{"type":["Object"],"valide":[],"name":"axisTick","desc":"\nSettings related to axis tick."},{"type":["Object"],"valide":[],"name":"splitLine","desc":"\nSettings related to axis line."},{"type":["Object"],"valide":[],"name":"splitArea","desc":"\n\nSplit area of axis in [grid](~grid) area.\n"},{"type":["Object"],"valide":[],"name":"axisPointer","desc":"\n\nConfigurations for axis pointer.\n"},{"type":["string"],"valide":["'auto'"],"name":"environment","desc":"\n\nEnvironment map. Support for solid colors, gradual colors, URL of panoramic texture. The default is `'auto'`, which is used as the environment texture when [light.ambientCubemap.texture](~grid3D.light.ambientCubemap.texture) is configured. Otherwise, the environment texture is not displayed.\n\nExample: \n```js\n// Configure as a panoramic texture\nenvironment: 'asset/starfield.jpg'\n// Configured as a solid black background\nenvironment: '#000'\n// Configured as a background with a vertical gradient\nenvironment: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n  offset: 0, color: '#00aaff' // Sky color\n}, {\n  offset: 0.7, color: '#998866' // Ground color\n}, {\n  offset: 1, color: '#998866' // Ground color\n}], false)\n\n```\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"light","desc":"\n\nLight related settings. Invalid when [shading](~grid3D.shading) is 'color'.\n\nThe lighting settings affect the components and all the charts on the component's coordinate system.\n\nA reasonable lighting setting can make the brightness and darkness of the whole scene richer and more layered.\n"},{"type":["Object"],"valide":[],"name":"postEffect","desc":"\n\nPost-processing effects related configuration. It can add effects such as highlights, depth of field, screen space ambient occlusion (SSAO), toning to the picture. And it can make the whole picture more textured.\n\nThe following are the differences between closing `postEffect` and opening `postEffect`.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-disable.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-enable.png\" width=\"100%\" title=\"Enable\">\n</div>\n\nNote that when postEffect is enable, [temporalSuperSampling](~grid3D.temporalSuperSampling) is enable by default. After the picture is still, the picture will continue to be enhanced, including anti-aliasing, depth of field, SSAO, shadows, etc.\n"},{"type":["Object"],"valide":[],"name":"temporalSuperSampling","desc":"\n\nTemporal supersampling. After opening [postEffect](~grid3D.postEffect), WebGL's default MSAA (MultiSampling Anti-Aliasing) will not work, so we need to solve the problem of sampling.\n\nTemporal supersampling is an anti-aliasing method. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated, thus achieving anti-aliasing effect.\nAnd in this process, ECharts-gl also progressively enhances some of the effects in [postEffect](~grid3D.postEffect) that require sampled guarantees. For example [SSAO](~grid3D.postEffect.SSAO), [Depth of Field](~grid3D.postEffect.depthOfField), and shadow.\n\nThe following is the difference between not opening `temporalSuperSampling` and opening `temporalSuperSampling`.\n\n<div class=\"twentytwenty-container\" style=\"width: 800px;\">\n    <img src=\"documents/asset/gl/img/surface-no-taa.png\" width=\"100%\" title=\"No AA\">\n    <img src=\"documents/asset/gl/img/surface-taa.png\" width=\"100%\" title=\"AA\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"viewControl","desc":"\n\n`viewControl` is used for mouse rotation, zooming, and other perspective control.\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n\n"},{"type":["string","number"],"valide":["auto"],"name":"left","desc":"\n\nDistance between  component and the left side of the container.\n\n`left` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'left'`, `'center'`, or `'right'`.\n\nIf the `left` value is set to be `'left'`, `'center'`, or `'right'`, then the component will be aligned automatically based on position.\n"},{"type":["string","number"],"valide":["auto"],"name":"top","desc":"\n\nDistance between  component and the top side of the container.\n\n`top` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'top'`, `'middle'`, or `'bottom'`.\n\nIf the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`, then the component will be aligned automatically based on position.\n"},{"type":["string","number"],"valide":["auto"],"name":"right","desc":"\n\nDistance between  component and the right side of the container.\n\n`right` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\n Adaptive by default.\n"},{"type":["string","number"],"valide":["auto"],"name":"bottom","desc":"\n\nDistance between  component and the bottom side of the container.\n\n`bottom` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\n Adaptive by default.\n\n"},{"type":["string","number"],"valide":["auto"],"name":"width","desc":"\n\n The width of the view of the component.\n"},{"type":["string","number"],"valide":["auto"],"name":"height","desc":"\n\n The height of the view of the component.\n\n\n\n\n\n\n\n\n"}],"grid3D.axisLine":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis line from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"grid3D.axisLine.lineStyle":[{"type":["string"],"valide":["'#333'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n\n\n\n\n"}],"grid3D.axisLabel":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis label from appearing.\n"},{"type":["number"],"valide":[8],"name":"margin","desc":"\nThe margin between the axis label and the axis line.\n\n**Note：** This distance is three-dimensional space, not screen space.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["string","Function"],"valide":[],"name":"formatter","desc":"\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\n"}],"grid3D.axisLabel.textStyle":[{"type":["Color","Function"],"valide":[],"name":"color","desc":"\n\nColor of axis label is set to be [axisLine.lineStyle.color](~.axisLine.lineStyle.color) by default. Callback function is supported, in the following format:\n\n```js\n(val: string) => Color\n```\nParameter is the text of label, and return value is the color. See the following example:\n\n```js\ntextStyle: {\n    color: function (value, index) {\n        return value >= 0 ? 'green' : 'red';\n    }\n}\n```\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n<!-- Overwrite color -->"}],"grid3D.axisTick":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis tick from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis.  Defaults to the same as [axisLabel.interval](~.axisLabel.interval). \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["number"],"valide":[5],"name":"length","desc":"\nThe length of the axis tick.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"grid3D.axisTick.lineStyle":[{"type":["Color"],"valide":[],"name":"color","desc":"\n\nColor of axis label is set to be [axisLine.lineStyle.color](~.axisLine.lineStyle.color) by default.\n\n\n\n\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n<!-- Overwrite color -->"}],"grid3D.splitLine":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis line from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"grid3D.splitLine.lineStyle":[{"type":["string"],"valide":["'#333'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n\n\n\n"}],"grid3D.splitArea":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `true` to show the splitArea.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\nAxis splitArea is valid in the category axis.  Defaults to the same as [axisLabel.interval](~.axisLabel.interval). \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"areaStyle","desc":"\nSplit area style."}],"grid3D.splitArea.areaStyle":[{"type":["Array"],"valide":["['rgba(250'","'250'","'250'","'0.3)''","''rgba(200'","'200'","'200'","'0.3)']"],"name":"color","desc":"\nColor of the split area.\nThe split area color could also be set in color array, which the split lines would take as their colors in turns. Dark and light colors in turns are used by default.\n\n\n\n\n\n\n\n\n"}],"grid3D.axisPointer":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the axisPointer. Set this to be `true` to show the splitArea.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nThe label of axisPointer.\n"}],"grid3D.axisPointer.lineStyle":[{"type":["string"],"valide":["'rgba(0'","' 0'","' 0'","' 0.8)'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n"}],"grid3D.axisPointer.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the label of axisPointer. Value axes are displayed by default, while category axes are not.\n"},{"type":["Function"],"valide":[],"name":"formatter","desc":"\nThe formatter of the label. . The first parameter to the function is the value of the current axis. The second parameter to the function is an array of values for all axes.\n\n```js\n(value: number, valueAll: Array) => string\n```\n"},{"type":["number"],"valide":[],"name":"margin","desc":"\nDistance between label and axis.\nLike the scale label, this distance is a 3D space rather than a screen pixel.\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\n\n"}],"grid3D.axisPointer.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[16],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}],"grid3D.light.main":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of the main light source.\n\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of the main light source.\n"},{"type":["boolean"],"valide":[],"name":"shadow","desc":"\n\nWhether the main light source displays a shadow. The default is off.\n\nTurning on the shadows can bring more realistic and layered lighting to the scene. But it also increases the operating overhead of the program.\n\nThe following two images show the difference between turning on the shadow and turning off the shadow.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow.png\" width=\"100%\" title=\"Shadow\">\n    <img src=\"documents/asset/gl/img/geo-no-shadow.png\" width=\"100%\" title=\"No Shadow\">\n</div>\n"},{"type":["string"],"valide":["'medium'"],"name":"shadowQuality","desc":"\n\nThe quality of the shadow. You can choose `'low'`, `'medium'`, `'high'`, `'ultra'`\n\nThe following two images shows the difference between low quality and high quality shadows.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow-low.png\" width=\"100%\" title=\"Low\">\n    <img src=\"documents/asset/gl/img/geo-shadow-high.png\" width=\"100%\" title=\"High\">\n</div>\n"},{"type":["number"],"valide":[30],"name":"alpha","desc":"\n\nThe main light source is around the x-axis, which is the angle of up-down rotation. Control the direction of the light with [beta](~grid3D.light.main.beta).\n\nAs the following image show:\n\n![](~light-alpha-beta.png)\n\nThe [globe](~globe) component can control the time of sunlight by [time](~globe.light.main.time).\n"},{"type":["number"],"valide":[30],"name":"beta","desc":"\n\nThe main light source is around the y-axis, which is the angle of the left-right rotation.\n\n\n\n\n"}],"grid3D.light":[{"type":["Object"],"valide":[],"name":"main","desc":"\n\nThe setting of the main light source of the scene. In the [globe](~globe) component is the sun.\n"},{"type":["Object"],"valide":[],"name":"ambient","desc":"\n\nGlobal ambient light settings.\n"},{"type":["Object"],"valide":[],"name":"ambientCubemap","desc":"\n\nThe ambientCubemap uses texture as the source of ambient light, which provides diffuse and specular for objects. The diffuse and specular can be set separately by [diffuseIntensity](~grid3D.light.ambientCubemap.diffuseIntensity) and [specularIntensity](~grid3D.light.ambientCubemap.specularIntensity).\n\n"}],"grid3D.light.ambient":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of ambient light.\n"},{"type":["number"],"valide":[0.2],"name":"intensity","desc":"\n\nThe intensity of ambient light.\n"}],"grid3D.light.ambientCubemap":[{"type":["string"],"valide":[],"name":"texture","desc":"\n\nThe URL of the ambient cubemap supports HDR images in the `.hdr` format. You can obtained the resources for `.hdr` from http://www.hdrlabs.com/sibl/archive.html and other websites.\n\nExample：\n\n```js\nambientCubemap: {\n    texture: 'pisa.hdr',\n    // The exposure value used when analytic hdr\n    exposure: 1.0\n}\n```\n"},{"type":["number"],"valide":[0.5],"name":"diffuseIntensity","desc":"\n\nThe intensity of diffuse.\n"},{"type":["number"],"valide":[0.5],"name":"specularIntensity","desc":"\n\nThe intensity of specular.\n\n\n\n\n\n"}],"grid3D.postEffect":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable post-processing effects. Not enabled by default.\n"},{"type":["Object"],"valide":[],"name":"bloom","desc":"\n\nBloom is used to reproducing the effects that occur in real cameras when taking pictures in a bright environment.\nBecause traditional RGB can only represent colors in the range of '0 - 255', so we need to use the bloom effect simulates fringes of light extending from the borders of bright areas, creating the illusion of a bright light overwhelming the camera. As shown below：\n\n![](~globe-posteffect-bloom.png)\n"},{"type":["Object"],"valide":[],"name":"depthOfField","desc":"\n\nDepth of Field is a post-processing effect that simulates the focus properties of a camera. The area of focus is clear, and the area away from the focus is gradually blurred.\n\nThe depth of field effect allows the observer to focus on the area of focus and make the picture feel stronger. Large depth of field can also create a macro model effect.\n\nThe following are the differences between turning off and turning on the depth of field effect.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-dof.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/geo-dof.png\" width=\"100%\" title=\"Enable\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"screenSpaceAmbientOcclusion","desc":"\n\n\nThe ambient occlusion post-processing effect darkens the corners, holes, crevices, and areas where most light can`t reach. It is a supplement to the traditional shadow map, which makes the whole scene more natural and layered.\n\nBelow is a comparison of the effects of no SSAO and SSAO:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-ssao.png\" width=\"100%\" title=\"No SSAO\">\n    <img src=\"documents/asset/gl/img/geo-ssao.png\" width=\"100%\" title=\"SSAO\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"SSAO","desc":"\n\nSame as [screenSpaceAmbientOcclusion](~grid3D.postEffect.screenSpaceAmbientOcclusion)\n\n"},{"type":["Object"],"valide":[],"name":"colorCorrection","desc":"\n\nColor correction and adjustment. Similar to Color Adjustments in Photoshop.\n\nThe same scene in the figure below is adjusted to the difference between the cool color system and the warm color system.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/buildings-cold.jpg\" width=\"100%\" title=\"Cold\">\n    <img src=\"documents/asset/gl/img/buildings-warm.jpg\" width=\"100%\" title=\"Warm\">\n</div>\n\n"},{"type":["Object"],"valide":[],"name":"FXAA","desc":"\n\nAfter opening [postEffect](~grid3D.postEffect), WebGL's default MSAA (Multi Sampling Anti Aliasing) will not work. At this time, FXAA (Fast Approximate Anti-Aliasing) can solve the anti-aliasing problem quickly and easily. FXAA blurs the edge of the scene to solve the problem of aliasing. It works well on some scenes, but in echarts-gl, you need to ensure that the edges of many texts and lines are sharp and clear, so FXAA is not suitable. At this point we can use supersampling by setting a higher `devicePixelRatio` as follows:\n\n```js\nvar chart = echarts.init(dom, null, {\n    devicePixelRatio: 2\n})\n```\n\nHowever, setting a higher `devicePixelRatio` has high requirements for computer performance, so more often we recommend using [temporalSuperSampling](~grid3D.temporalSuperSampling) in echarts-gl. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated.,thus achieving anti-aliasing effect.\n"}],"grid3D.postEffect.bloom":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the bloom effect.\n"},{"type":["number"],"valide":[0.1],"name":"bloomIntensity","desc":"\n\nThe intensity of the bloom. The default is 0.1.\n"}],"grid3D.postEffect.depthOfField":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the depth of field.\n"},{"type":["boolean"],"valide":[50],"name":"focalDistance","desc":"\n\nThe initial focus distance. The user can click on the area to automatically focus.\n"},{"type":["boolean"],"valide":[20],"name":"focalRange","desc":"\n\nThe size of the in-focus area. The objects in this range are completely clear and there is no blurring.\n\n"},{"type":["number"],"valide":[2.8],"name":"fstop","desc":"\n\n[F value] of the lens (https://zh.wikipedia.org/wiki/%E7%84%A6%E6%AF%94), the smaller the value, the shallower the depth of field.\n"},{"type":["number"],"valide":[10],"name":"blurRadius","desc":"\n\nBlur radius outside the focus.\n\nThe difference blur effect between the different radius. \n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-dof-small.png\" width=\"100%\" title=\"blurSize: 3\">\n    <img src=\"documents/asset/gl/img/geo-dof-large.png\" width=\"100%\" title=\"blurSize: 10\">\n</div>\n"}],"grid3D.postEffect.SSAO":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable SSAO (screen space ambient occlusion). Not enabled by default.\n"},{"type":["string"],"valide":["'medium'"],"name":"quality","desc":"\n\nThe quality of SSAO (screen space ambient occlusion). Supporting`'low'`, `'medium'`, `'high'`, `'ultra'`\n"},{"type":["number"],"valide":[2],"name":"radius","desc":"\n\nThe radius of the SSAO (screen space ambient occlusion). The larger the radius, the more natural the effect, but you need to set a higher `'quality'`. \n\nThe following example is the difference between a smaller and larger radius:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-ssao-small-radius.png\" width=\"100%\" title=\"Radius: 1\">\n    <img src=\"documents/asset/gl/img/geo-ssao-large-radius.png\" width=\"100%\" title=\"Radius: 10\">\n</div>\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of SSAO (screen space ambient occlusion). The larger the value, the darker the color.\n\n"}],"grid3D.postEffect.colorCorrection":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the color correction.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"lookupTexture","desc":"\n\nColor correction lookup texture, recommended.\n\nThe color correction lookup texture is a texture image like the one below.\n\n![200xauto](~lookup.png)\n\nThis is the basic lookup texture image that you can use directly.\nTo adjust the color of the scene to the effect you want, you can take a screenshot of the scene and adjust the color to the desired effect in image processing software such as Photoshop. Then apply the same adjustment to the image of the lookup texture above.\n\nFor example, after turning into a cool tone, the image of the lookup texture will look like this:\n\n![200xauto](~crispwinter.png)\n\nThen the texture image is used as the value of the configuration item, and you can get the same effect in Photoshop.\n\nOf course, if you just want to get a screenshot, you don't have to do it anymore, but if you want to easily adjust to the ideal color in real-time interactive works, this is very useful.\n"},{"type":["number"],"valide":[0],"name":"exposure","desc":"\n\nThe exposure of the image.\n"},{"type":["number"],"valide":[0],"name":"brightness","desc":"\n\nThe brightness of the image.\n"},{"type":["number"],"valide":[1],"name":"contrast","desc":"\n\nThe contrast of the image.\n"},{"type":["number"],"valide":[1],"name":"saturation","desc":"\n\nThe saturation of the image.\n\n\n"}],"grid3D.postEffect.FXAA":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable FXAA. Not enabled by default.\n\n\n\n\n\n\n\n"}],"grid3D.temporalSuperSampling":[{"type":["boolean"],"valide":["'auto'"],"name":"enable","desc":"\n\nWhether to enable temporal supersampling. By default, temporal supersampling is also turned on synchronously when [postEffect] (~grid3D.postEffect) is turned on.\n\n\n\n\n"}],"grid3D.viewControl":[{"type":["string"],"valide":["perspective"],"name":"projection","desc":"\n\nThe way of projection, the default is `'perspective'` projection, also supports setting to `'orthogonal'` projection.\n\n"},{"type":["boolean"],"valide":[],"name":"autoRotate","desc":"\n\nWhether to enable the angle of view to automatically rotate around the object.\n"},{"type":["string"],"valide":["cw"],"name":"autoRotateDirection","desc":"\n\nThe direction in which the object auto rotates. The default is `'cw'` means clockwise from top to bottom, and can also use  `'ccw'` means counterclockwise from top to bottom.\n"},{"type":["number"],"valide":[10],"name":"autoRotateSpeed","desc":"\n\nThe speed at which the object auto rotates. The unit is `angle/second`, the default is `10`, which is a turn of `36` seconds.\n\n"},{"type":["number"],"valide":[3],"name":"autoRotateAfterStill","desc":"\n\nThe time interval for automatic rotation to resume after the mouse is still. Valid after opening [autoRotate](~grid3D.viewControl.autoRotate).\n\n"},{"type":["number"],"valide":[0.8],"name":"damping","desc":"\n\nThe damping when the mouse is rotated, zoomed, etc.\nWhen it is greater than 0, the angle of view will continue to move (rotate and zoom) due to certain inertia after the mouse is still.\n\n\n"},{"type":["number","Array"],"valide":[1],"name":"rotateSensitivity","desc":"\n\nThe sensitivity of the rotation operation. The greater the value, the more sensitive. Supports the use of arrays to set the horizontal and vertical rotation sensitivity separately.\n\n\nThe default is `1`.\n\nCannot be rotated after setting to `0`.\n\n```js\n// can't rotate\nrotateSensitivity: 0\n// can only be rotated horizontally\nrotateSensitivity: [1, 0]\n//  can only rotate vertically\nrotateSensitivity: [0, 1]\n```\n"},{"type":["number"],"valide":[1],"name":"zoomSensitivity","desc":"\n\nThe sensitivity of the zoom operation, the larger the value, the more sensitive. The default is `1`.\n\nCan`t be scaled after setting to `0`.\n"},{"type":["number"],"valide":[1],"name":"panSensitivity","desc":"\n\nThe sensitivity of the panning operation, the greater the value, the more sensitive. Supports the use of arrays to set the horizontal and vertical translation sensitivity.\n\nThe default is `1`.\n\nCannot pan after setting to `0`.\n"},{"type":["string"],"valide":["left"],"name":"panMouseButton","desc":"\n\nThe mouse button used for panning operation supports:\n\n+ `'left'` left mouse button (default)\n\n+ `'middle'` middle mouse button\n\n+ `'right'` right mouse button\n\nNote: If set to the right mouse button, the default context menu will be blocked.\n"},{"type":["string"],"valide":["middle"],"name":"rotateMouseButton","desc":"\n\nThe mouse button used for the rotation operation supports:\n\n+ `'left'` left mouse button\n\n+ `'middle'` middle mouse button (default)\n\n+ `'right'` right mouse button\n\nNote: If set to the right mouse button, the default context menu will be blocked.\n"},{"type":["number"],"valide":[200],"name":"distance","desc":"\n\nThe distance of the default perspective from the subject. For [globe](~globe), the distance from the Earth's surface is the distance from the center origin for other components such as [grid3D](~grid3D) and [geo3D](~geo3D). Valid when [projection](~grid3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[40],"name":"minDistance","desc":"\n\nThe angle of view is controlled by the mouse to bring the minimum distance to the subject. Valid when [projection](~grid3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[400],"name":"maxDistance","desc":"\n\nThe angle of view can be extended to the maximum distance of the subject by mouse control. Valid when [projection](~grid3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[200],"name":"orthographicSize","desc":"\n\nThe size of the orthogonal projection. Valid when [projection](~grid3D.viewControl.projection) is `'orthographic'`.\n\n"},{"type":["number"],"valide":[40],"name":"maxOrthographicSize","desc":"\n\nThe maximum value of the orthogonal projection scaling. Valid when [projection](~grid3D.viewControl.projection) is `'orthographic'`.\n"},{"type":["number"],"valide":[400],"name":"minOrthographicSize","desc":"\n\nThe minimum value of the orthogonal projection scaling. Valid when [projection](~grid3D.viewControl.projection) is `'orthographic'`\n"},{"type":["number"],"valide":[20],"name":"alpha","desc":"\n\nThe angle of view is around the x-axis, which is the angle of rotation up and down. With [beta](~grid3D.light.main.beta) you can control the direction of the perspective.\n\nAs shown below：\n\n![](~view-alpha-beta.png)\n"},{"type":["number"],"valide":[40],"name":"beta","desc":"\n\nThe angle of view is around the y-axis, which is the angle of rotation from left to right.\n"},{"type":["Array"],"valide":[],"name":"center","desc":"\n\nAt the center of the angle of view, the rotation will also rotate around this center point. The default is `[0,0,0]`.\n"},{"type":["number"],"valide":[-90],"name":"minAlpha","desc":"\n\nThe minimum alpha value to rotate up and down. That is, the angle of view can be rotated to reach the uppermost angle.\n"},{"type":["number"],"valide":[90],"name":"maxAlpha","desc":"\n\nThe maximum alpha value to rotate up and down. That is, the angle of view can be rotated to the lowest angle.\n"},{"type":["number"],"valide":[null],"name":"minBeta","desc":"\n\nThe minimum beta value to rotate left and right. That is, the angle of view can be rotated to the leftmost angle.\n"},{"type":["number"],"valide":[null],"name":"maxBeta","desc":"\n\nThe maximum beta value to rotate left and right rotation. That is, the angle of view can be rotated to the rightmost angle.\n\n\n"},{"type":["boolean"],"valide":[],"name":"animation","desc":"\n\nWhether to enable animation.\n"},{"type":["number"],"valide":[1000],"name":"animationDurationUpdate","desc":"\n\nThe duration time for update the transition animation.\n"},{"type":["string"],"valide":["cubicInOut"],"name":"animationEasingUpdate","desc":"\n\nThe easing effect for update transition animation.\n\n\n\n\n\n\n\n\n"}],"xAxis3D":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the x-axis.\n"},{"type":["string"],"valide":["'X'"],"name":"name","desc":"\n\nThe name of the axis.\n\n\n"},{"type":["number"],"valide":[0],"name":"grid3DIndex","desc":"\n\nThe index of the [grid3D](~grid3D) component used by the axis. The default is to use the first [grid3D](~grid3D) component.\n"},{"type":["Object"],"valide":[],"name":"nameTextStyle","desc":"\n\nText style of axis name.\n\n\n"},{"type":["number"],"valide":[20],"name":"nameGap","desc":"\n\nThe gap between the axis name and axis line. Note the distance is in 3D space, not the screen pixel value.\n"},{"type":["string"],"valide":["value"],"name":"type","desc":"\n\nThe type of the axis.\n\nOptional:\n+ `'value'`\n    The value axis. Suitable for continuous data.\n\n+ `'category'`\n    The category axis. Suitable for the discrete category data. For this type, the category data must be set through [data](~xAxis3D.data).\n\n+ `'time'`\n    The timeline. Suitable for the continuous timing data. The time axis has a time format compared to the value axis, and the scale calculation is also different. For example, the scale of the month, week, day, and hour ranges can be determined according to the range of the span.\n\n+ `'log'`\n    Logarithmic axis. Suitable for the logarithmic data.\n"},{"type":["number","string"],"valide":[],"name":"min","desc":"\n\nThe minimum value of axis.\n\nIt can be set to a special value `'dataMin'` so that the minimum value on this axis is set to be the minimum label.\n\nIt will be automatically computed to make sure the axis tick is equally distributed when not set.\n\nIn the category axis, it can also be set as the ordinal number. For example, if a category axis has `data: ['categoryA', 'categoryB', 'categoryC']`, and the ordinal `2` represents `'categoryC'`. Moreover, it can be set as a negative number, like `-3`.\n"},{"type":["number","string"],"valide":[],"name":"max","desc":"\n\nThe maximum value of the axis.\n\nIt can be set to a special value `'dataMax'` so that the minimum value on this axis is set to be the maximum label.\n\nIt will be automatically computed to make sure the axis tick is equally distributed when not set.\n\nIn the category axis, it can also be set as the ordinal number. For example, if a category axis has `data: ['categoryA', 'categoryB', 'categoryC']`, and the ordinal `2` represents `'categoryC'`. Moreover, it can be set as a negative number, like `-3`.\n"},{"type":["boolean"],"valide":[],"name":"scale","desc":"\n\nIt is available only in numerical axis, i.e., [type](~xAxis3D.type): 'value'.\n\nIt specifies whether not to contain zero position of axis compulsively. When it is set to be `true`, the axis may not contain zero position, which is useful in the scatter chart for both value axes.\n\nThis configuration item is unavailable when the [min](~xAxis3D.min) and [max](~xAxis3D.max) are set.\n"},{"type":["number"],"valide":[5],"name":"splitNumber","desc":"\n\nThe number of segments that the axis is split into. Note that this number serves only as a recommendation, and the true segments may be adjusted based on readability.\n\nThis is unavailable for the category axis.\n"},{"type":["number"],"valide":[0],"name":"minInterval","desc":"\n\nMinimum gap between split lines.\n\nFor example, it can be set to be `1` to make sure the axis label is shown as an integer.\n\n```js\n{\n    minInterval: 1\n}\n```\n\nIt is available only for axis of [type](~xAxis3D.type) 'value' or 'time'.\n"},{"type":["number"],"valide":[],"name":"interval","desc":"\n\nCompulsively set segmentation interval for axis.\n\nAs [splitNumber](~xAxis3D.splitNumber) is a recommendation value, the calculated tick may not be the same as expected. In this case, interval should be used along with [min](~xAxis3D.min) and [max](~xAxis3D.max) to compulsively set tickings. But in most cases, we do not suggest using this, out automatic calculation is enough for most situations.\n\nThis is unavailable for category axis. Timestamp should be passed for [type](~xAxis3D.type): 'time' axis. Logged value should be passed for [type](~xAxis3D.type): 'log' axis.\n"},{"type":["number"],"valide":[10],"name":"logBase","desc":"\n\nBase of logarithm, which is valid only for numeric axes with [type](~xAxis3D.type): 'log'.\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nCategory data, available in [type](~xAxis3D.type): 'category' axis.\n\nIf [type](~xAxis3D.type) is specified as `'category'`, but `axis.data` is not specified, `axis.data` will be auto collected from [series.data](~series.data). It brings convenience, but we should notice that `axis.data` provides then value range of the `'category'` axis. If  it is auto collected from [series.data](~series.data), Only the values appearing in [series.data](~series.data) can be collected. For example, if [series.data](~series.data) is empty, nothing will be collected.\n\nExample:\n\n```js\n// Name list of all categories\ndata: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n// Each item could also be a specific configuration item.\n// In this case, `value` is used as the category name.\ndata: [{\n    value: 'Monday',\n    // Highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: 'red'\n    }\n}, 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n```\n"},{"type":["Object"],"valide":[],"name":"axisLine","desc":"\nSettings related to axis line."},{"type":["Object"],"valide":[],"name":"axisLabel","desc":"\nSettings related to axis label."},{"type":["Object"],"valide":[],"name":"axisTick","desc":"\nSettings related to axis tick."},{"type":["Object"],"valide":[],"name":"splitLine","desc":"\nSettings related to axis line."},{"type":["Object"],"valide":[],"name":"splitArea","desc":"\n\nSplit area of axis in [grid](~grid) area.\n"},{"type":["Object"],"valide":[],"name":"axisPointer","desc":"\n\nConfigurations for axis pointer.\n"}],"xAxis3D.nameTextStyle":[{"type":["Color"],"valide":[],"name":"color","desc":"\n\nColor of axis name uses [axisLine.lineStyle.color](~xAxis3D.axisLine.lineStyle.color) by default.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[16],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n"}],"xAxis3D.data":[{"type":["string"],"valide":[],"name":"value","desc":"\n\nName of a category.\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nText style of the category.\n\n\n"}],"xAxis3D.data.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\nThe display interval of \n\n\n\n\n"}],"xAxis3D.axisLine":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis line from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"xAxis3D.axisLine.lineStyle":[{"type":["string"],"valide":["'#333'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n\n\n\n\n"}],"xAxis3D.axisLabel":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis label from appearing.\n"},{"type":["number"],"valide":[8],"name":"margin","desc":"\nThe margin between the axis label and the axis line.\n\n**Note：** This distance is three-dimensional space, not screen space.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["string","Function"],"valide":[],"name":"formatter","desc":"\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\n"}],"xAxis3D.axisLabel.textStyle":[{"type":["Color","Function"],"valide":[],"name":"color","desc":"\n\nColor of axis label is set to be [axisLine.lineStyle.color](~.axisLine.lineStyle.color) by default. Callback function is supported, in the following format:\n\n```js\n(val: string) => Color\n```\nParameter is the text of label, and return value is the color. See the following example:\n\n```js\ntextStyle: {\n    color: function (value, index) {\n        return value >= 0 ? 'green' : 'red';\n    }\n}\n```\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n<!-- Overwrite color -->"}],"xAxis3D.axisTick":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis tick from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis.  Defaults to the same as [axisLabel.interval](~.axisLabel.interval). \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["number"],"valide":[5],"name":"length","desc":"\nThe length of the axis tick.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"xAxis3D.axisTick.lineStyle":[{"type":["Color"],"valide":[],"name":"color","desc":"\n\nColor of axis label is set to be [axisLine.lineStyle.color](~.axisLine.lineStyle.color) by default.\n\n\n\n\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n<!-- Overwrite color -->"}],"xAxis3D.splitLine":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis line from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"xAxis3D.splitLine.lineStyle":[{"type":["string"],"valide":["'#333'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n\n\n\n"}],"xAxis3D.splitArea":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `true` to show the splitArea.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\nAxis splitArea is valid in the category axis.  Defaults to the same as [axisLabel.interval](~.axisLabel.interval). \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"areaStyle","desc":"\nSplit area style."}],"xAxis3D.splitArea.areaStyle":[{"type":["Array"],"valide":["['rgba(250'","'250'","'250'","'0.3)''","''rgba(200'","'200'","'200'","'0.3)']"],"name":"color","desc":"\nColor of the split area.\nThe split area color could also be set in color array, which the split lines would take as their colors in turns. Dark and light colors in turns are used by default.\n\n\n\n\n\n\n\n\n"}],"xAxis3D.axisPointer":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the axisPointer. Set this to be `true` to show the splitArea.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nThe label of axisPointer.\n"}],"xAxis3D.axisPointer.lineStyle":[{"type":["string"],"valide":["'rgba(0'","' 0'","' 0'","' 0.8)'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n"}],"xAxis3D.axisPointer.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the label of axisPointer. Value axes are displayed by default, while category axes are not.\n"},{"type":["Function"],"valide":[],"name":"formatter","desc":"\nThe formatter of the label. . The first parameter to the function is the value of the current axis. The second parameter to the function is an array of values for all axes.\n\n```js\n(value: number, valueAll: Array) => string\n```\n"},{"type":["number"],"valide":[],"name":"margin","desc":"\nDistance between label and axis.\nLike the scale label, this distance is a 3D space rather than a screen pixel.\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\n\n"}],"xAxis3D.axisPointer.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[16],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}],"yAxis3D":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the y-axis.\n"},{"type":["string"],"valide":["'Y'"],"name":"name","desc":"\n\nThe name of the axis.\n\n\n"},{"type":["number"],"valide":[0],"name":"grid3DIndex","desc":"\n\nThe index of the [grid3D](~grid3D) component used by the axis. The default is to use the first [grid3D](~grid3D) component.\n"},{"type":["Object"],"valide":[],"name":"nameTextStyle","desc":"\n\nText style of axis name.\n\n\n"},{"type":["number"],"valide":[20],"name":"nameGap","desc":"\n\nThe gap between the axis name and axis line. Note the distance is in 3D space, not the screen pixel value.\n"},{"type":["string"],"valide":["value"],"name":"type","desc":"\n\nThe type of the axis.\n\nOptional:\n+ `'value'`\n    The value axis. Suitable for continuous data.\n\n+ `'category'`\n    The category axis. Suitable for the discrete category data. For this type, the category data must be set through [data](~yAxis3D.data).\n\n+ `'time'`\n    The timeline. Suitable for the continuous timing data. The time axis has a time format compared to the value axis, and the scale calculation is also different. For example, the scale of the month, week, day, and hour ranges can be determined according to the range of the span.\n\n+ `'log'`\n    Logarithmic axis. Suitable for the logarithmic data.\n"},{"type":["number","string"],"valide":[],"name":"min","desc":"\n\nThe minimum value of axis.\n\nIt can be set to a special value `'dataMin'` so that the minimum value on this axis is set to be the minimum label.\n\nIt will be automatically computed to make sure the axis tick is equally distributed when not set.\n\nIn the category axis, it can also be set as the ordinal number. For example, if a category axis has `data: ['categoryA', 'categoryB', 'categoryC']`, and the ordinal `2` represents `'categoryC'`. Moreover, it can be set as a negative number, like `-3`.\n"},{"type":["number","string"],"valide":[],"name":"max","desc":"\n\nThe maximum value of the axis.\n\nIt can be set to a special value `'dataMax'` so that the minimum value on this axis is set to be the maximum label.\n\nIt will be automatically computed to make sure the axis tick is equally distributed when not set.\n\nIn the category axis, it can also be set as the ordinal number. For example, if a category axis has `data: ['categoryA', 'categoryB', 'categoryC']`, and the ordinal `2` represents `'categoryC'`. Moreover, it can be set as a negative number, like `-3`.\n"},{"type":["boolean"],"valide":[],"name":"scale","desc":"\n\nIt is available only in numerical axis, i.e., [type](~yAxis3D.type): 'value'.\n\nIt specifies whether not to contain zero position of axis compulsively. When it is set to be `true`, the axis may not contain zero position, which is useful in the scatter chart for both value axes.\n\nThis configuration item is unavailable when the [min](~yAxis3D.min) and [max](~yAxis3D.max) are set.\n"},{"type":["number"],"valide":[5],"name":"splitNumber","desc":"\n\nThe number of segments that the axis is split into. Note that this number serves only as a recommendation, and the true segments may be adjusted based on readability.\n\nThis is unavailable for the category axis.\n"},{"type":["number"],"valide":[0],"name":"minInterval","desc":"\n\nMinimum gap between split lines.\n\nFor example, it can be set to be `1` to make sure the axis label is shown as an integer.\n\n```js\n{\n    minInterval: 1\n}\n```\n\nIt is available only for axis of [type](~yAxis3D.type) 'value' or 'time'.\n"},{"type":["number"],"valide":[],"name":"interval","desc":"\n\nCompulsively set segmentation interval for axis.\n\nAs [splitNumber](~yAxis3D.splitNumber) is a recommendation value, the calculated tick may not be the same as expected. In this case, interval should be used along with [min](~yAxis3D.min) and [max](~yAxis3D.max) to compulsively set tickings. But in most cases, we do not suggest using this, out automatic calculation is enough for most situations.\n\nThis is unavailable for category axis. Timestamp should be passed for [type](~yAxis3D.type): 'time' axis. Logged value should be passed for [type](~yAxis3D.type): 'log' axis.\n"},{"type":["number"],"valide":[10],"name":"logBase","desc":"\n\nBase of logarithm, which is valid only for numeric axes with [type](~yAxis3D.type): 'log'.\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nCategory data, available in [type](~yAxis3D.type): 'category' axis.\n\nIf [type](~yAxis3D.type) is specified as `'category'`, but `axis.data` is not specified, `axis.data` will be auto collected from [series.data](~series.data). It brings convenience, but we should notice that `axis.data` provides then value range of the `'category'` axis. If  it is auto collected from [series.data](~series.data), Only the values appearing in [series.data](~series.data) can be collected. For example, if [series.data](~series.data) is empty, nothing will be collected.\n\nExample:\n\n```js\n// Name list of all categories\ndata: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n// Each item could also be a specific configuration item.\n// In this case, `value` is used as the category name.\ndata: [{\n    value: 'Monday',\n    // Highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: 'red'\n    }\n}, 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n```\n"},{"type":["Object"],"valide":[],"name":"axisLine","desc":"\nSettings related to axis line."},{"type":["Object"],"valide":[],"name":"axisLabel","desc":"\nSettings related to axis label."},{"type":["Object"],"valide":[],"name":"axisTick","desc":"\nSettings related to axis tick."},{"type":["Object"],"valide":[],"name":"splitLine","desc":"\nSettings related to axis line."},{"type":["Object"],"valide":[],"name":"splitArea","desc":"\n\nSplit area of axis in [grid](~grid) area.\n"},{"type":["Object"],"valide":[],"name":"axisPointer","desc":"\n\nConfigurations for axis pointer.\n"}],"yAxis3D.nameTextStyle":[{"type":["Color"],"valide":[],"name":"color","desc":"\n\nColor of axis name uses [axisLine.lineStyle.color](~yAxis3D.axisLine.lineStyle.color) by default.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[16],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n"}],"yAxis3D.data":[{"type":["string"],"valide":[],"name":"value","desc":"\n\nName of a category.\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nText style of the category.\n\n\n"}],"yAxis3D.data.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\nThe display interval of \n\n\n\n\n"}],"yAxis3D.axisLine":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis line from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"yAxis3D.axisLine.lineStyle":[{"type":["string"],"valide":["'#333'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n\n\n\n\n"}],"yAxis3D.axisLabel":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis label from appearing.\n"},{"type":["number"],"valide":[8],"name":"margin","desc":"\nThe margin between the axis label and the axis line.\n\n**Note：** This distance is three-dimensional space, not screen space.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["string","Function"],"valide":[],"name":"formatter","desc":"\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\n"}],"yAxis3D.axisLabel.textStyle":[{"type":["Color","Function"],"valide":[],"name":"color","desc":"\n\nColor of axis label is set to be [axisLine.lineStyle.color](~.axisLine.lineStyle.color) by default. Callback function is supported, in the following format:\n\n```js\n(val: string) => Color\n```\nParameter is the text of label, and return value is the color. See the following example:\n\n```js\ntextStyle: {\n    color: function (value, index) {\n        return value >= 0 ? 'green' : 'red';\n    }\n}\n```\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n<!-- Overwrite color -->"}],"yAxis3D.axisTick":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis tick from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis.  Defaults to the same as [axisLabel.interval](~.axisLabel.interval). \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["number"],"valide":[5],"name":"length","desc":"\nThe length of the axis tick.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"yAxis3D.axisTick.lineStyle":[{"type":["Color"],"valide":[],"name":"color","desc":"\n\nColor of axis label is set to be [axisLine.lineStyle.color](~.axisLine.lineStyle.color) by default.\n\n\n\n\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n<!-- Overwrite color -->"}],"yAxis3D.splitLine":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis line from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"yAxis3D.splitLine.lineStyle":[{"type":["string"],"valide":["'#333'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n\n\n\n"}],"yAxis3D.splitArea":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `true` to show the splitArea.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\nAxis splitArea is valid in the category axis.  Defaults to the same as [axisLabel.interval](~.axisLabel.interval). \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"areaStyle","desc":"\nSplit area style."}],"yAxis3D.splitArea.areaStyle":[{"type":["Array"],"valide":["['rgba(250'","'250'","'250'","'0.3)''","''rgba(200'","'200'","'200'","'0.3)']"],"name":"color","desc":"\nColor of the split area.\nThe split area color could also be set in color array, which the split lines would take as their colors in turns. Dark and light colors in turns are used by default.\n\n\n\n\n\n\n\n\n"}],"yAxis3D.axisPointer":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the axisPointer. Set this to be `true` to show the splitArea.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nThe label of axisPointer.\n"}],"yAxis3D.axisPointer.lineStyle":[{"type":["string"],"valide":["'rgba(0'","' 0'","' 0'","' 0.8)'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n"}],"yAxis3D.axisPointer.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the label of axisPointer. Value axes are displayed by default, while category axes are not.\n"},{"type":["Function"],"valide":[],"name":"formatter","desc":"\nThe formatter of the label. . The first parameter to the function is the value of the current axis. The second parameter to the function is an array of values for all axes.\n\n```js\n(value: number, valueAll: Array) => string\n```\n"},{"type":["number"],"valide":[],"name":"margin","desc":"\nDistance between label and axis.\nLike the scale label, this distance is a 3D space rather than a screen pixel.\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\n\n"}],"yAxis3D.axisPointer.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[16],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}],"zAxis3D":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the z-axis.\n"},{"type":["string"],"valide":["'Z'"],"name":"name","desc":"\n\nThe name of the axis.\n\n\n"},{"type":["number"],"valide":[0],"name":"grid3DIndex","desc":"\n\nThe index of the [grid3D](~grid3D) component used by the axis. The default is to use the first [grid3D](~grid3D) component.\n"},{"type":["Object"],"valide":[],"name":"nameTextStyle","desc":"\n\nText style of axis name.\n\n\n"},{"type":["number"],"valide":[20],"name":"nameGap","desc":"\n\nThe gap between the axis name and axis line. Note the distance is in 3D space, not the screen pixel value.\n"},{"type":["string"],"valide":["value"],"name":"type","desc":"\n\nThe type of the axis.\n\nOptional:\n+ `'value'`\n    The value axis. Suitable for continuous data.\n\n+ `'category'`\n    The category axis. Suitable for the discrete category data. For this type, the category data must be set through [data](~zAxis3D.data).\n\n+ `'time'`\n    The timeline. Suitable for the continuous timing data. The time axis has a time format compared to the value axis, and the scale calculation is also different. For example, the scale of the month, week, day, and hour ranges can be determined according to the range of the span.\n\n+ `'log'`\n    Logarithmic axis. Suitable for the logarithmic data.\n"},{"type":["number","string"],"valide":[],"name":"min","desc":"\n\nThe minimum value of axis.\n\nIt can be set to a special value `'dataMin'` so that the minimum value on this axis is set to be the minimum label.\n\nIt will be automatically computed to make sure the axis tick is equally distributed when not set.\n\nIn the category axis, it can also be set as the ordinal number. For example, if a category axis has `data: ['categoryA', 'categoryB', 'categoryC']`, and the ordinal `2` represents `'categoryC'`. Moreover, it can be set as a negative number, like `-3`.\n"},{"type":["number","string"],"valide":[],"name":"max","desc":"\n\nThe maximum value of the axis.\n\nIt can be set to a special value `'dataMax'` so that the minimum value on this axis is set to be the maximum label.\n\nIt will be automatically computed to make sure the axis tick is equally distributed when not set.\n\nIn the category axis, it can also be set as the ordinal number. For example, if a category axis has `data: ['categoryA', 'categoryB', 'categoryC']`, and the ordinal `2` represents `'categoryC'`. Moreover, it can be set as a negative number, like `-3`.\n"},{"type":["boolean"],"valide":[],"name":"scale","desc":"\n\nIt is available only in numerical axis, i.e., [type](~zAxis3D.type): 'value'.\n\nIt specifies whether not to contain zero position of axis compulsively. When it is set to be `true`, the axis may not contain zero position, which is useful in the scatter chart for both value axes.\n\nThis configuration item is unavailable when the [min](~zAxis3D.min) and [max](~zAxis3D.max) are set.\n"},{"type":["number"],"valide":[5],"name":"splitNumber","desc":"\n\nThe number of segments that the axis is split into. Note that this number serves only as a recommendation, and the true segments may be adjusted based on readability.\n\nThis is unavailable for the category axis.\n"},{"type":["number"],"valide":[0],"name":"minInterval","desc":"\n\nMinimum gap between split lines.\n\nFor example, it can be set to be `1` to make sure the axis label is shown as an integer.\n\n```js\n{\n    minInterval: 1\n}\n```\n\nIt is available only for axis of [type](~zAxis3D.type) 'value' or 'time'.\n"},{"type":["number"],"valide":[],"name":"interval","desc":"\n\nCompulsively set segmentation interval for axis.\n\nAs [splitNumber](~zAxis3D.splitNumber) is a recommendation value, the calculated tick may not be the same as expected. In this case, interval should be used along with [min](~zAxis3D.min) and [max](~zAxis3D.max) to compulsively set tickings. But in most cases, we do not suggest using this, out automatic calculation is enough for most situations.\n\nThis is unavailable for category axis. Timestamp should be passed for [type](~zAxis3D.type): 'time' axis. Logged value should be passed for [type](~zAxis3D.type): 'log' axis.\n"},{"type":["number"],"valide":[10],"name":"logBase","desc":"\n\nBase of logarithm, which is valid only for numeric axes with [type](~zAxis3D.type): 'log'.\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nCategory data, available in [type](~zAxis3D.type): 'category' axis.\n\nIf [type](~zAxis3D.type) is specified as `'category'`, but `axis.data` is not specified, `axis.data` will be auto collected from [series.data](~series.data). It brings convenience, but we should notice that `axis.data` provides then value range of the `'category'` axis. If  it is auto collected from [series.data](~series.data), Only the values appearing in [series.data](~series.data) can be collected. For example, if [series.data](~series.data) is empty, nothing will be collected.\n\nExample:\n\n```js\n// Name list of all categories\ndata: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n// Each item could also be a specific configuration item.\n// In this case, `value` is used as the category name.\ndata: [{\n    value: 'Monday',\n    // Highlight Monday\n    textStyle: {\n        fontSize: 20,\n        color: 'red'\n    }\n}, 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']\n```\n"},{"type":["Object"],"valide":[],"name":"axisLine","desc":"\nSettings related to axis line."},{"type":["Object"],"valide":[],"name":"axisLabel","desc":"\nSettings related to axis label."},{"type":["Object"],"valide":[],"name":"axisTick","desc":"\nSettings related to axis tick."},{"type":["Object"],"valide":[],"name":"splitLine","desc":"\nSettings related to axis line."},{"type":["Object"],"valide":[],"name":"splitArea","desc":"\n\nSplit area of axis in [grid](~grid) area.\n"},{"type":["Object"],"valide":[],"name":"axisPointer","desc":"\n\nConfigurations for axis pointer.\n"}],"zAxis3D.nameTextStyle":[{"type":["Color"],"valide":[],"name":"color","desc":"\n\nColor of axis name uses [axisLine.lineStyle.color](~zAxis3D.axisLine.lineStyle.color) by default.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[16],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n"}],"zAxis3D.data":[{"type":["string"],"valide":[],"name":"value","desc":"\n\nName of a category.\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nText style of the category.\n\n\n"}],"zAxis3D.data.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\nThe display interval of \n\n\n\n\n"}],"zAxis3D.axisLine":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis line from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"zAxis3D.axisLine.lineStyle":[{"type":["string"],"valide":["'#333'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n\n\n\n\n"}],"zAxis3D.axisLabel":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis label from appearing.\n"},{"type":["number"],"valide":[8],"name":"margin","desc":"\nThe margin between the axis label and the axis line.\n\n**Note：** This distance is three-dimensional space, not screen space.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["string","Function"],"valide":[],"name":"formatter","desc":"\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\n"}],"zAxis3D.axisLabel.textStyle":[{"type":["Color","Function"],"valide":[],"name":"color","desc":"\n\nColor of axis label is set to be [axisLine.lineStyle.color](~.axisLine.lineStyle.color) by default. Callback function is supported, in the following format:\n\n```js\n(val: string) => Color\n```\nParameter is the text of label, and return value is the color. See the following example:\n\n```js\ntextStyle: {\n    color: function (value, index) {\n        return value >= 0 ? 'green' : 'red';\n    }\n}\n```\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n<!-- Overwrite color -->"}],"zAxis3D.axisTick":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis tick from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis.  Defaults to the same as [axisLabel.interval](~.axisLabel.interval). \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["number"],"valide":[5],"name":"length","desc":"\nThe length of the axis tick.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"zAxis3D.axisTick.lineStyle":[{"type":["Color"],"valide":[],"name":"color","desc":"\n\nColor of axis label is set to be [axisLine.lineStyle.color](~.axisLine.lineStyle.color) by default.\n\n\n\n\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n<!-- Overwrite color -->"}],"zAxis3D.splitLine":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `false` to prevent the axis line from showing.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\naxis scale label is valid in the category axis. \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n"}],"zAxis3D.splitLine.lineStyle":[{"type":["string"],"valide":["'#333'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n\n\n\n"}],"zAxis3D.splitArea":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nSet this to be `true` to show the splitArea.\n\n"},{"type":["number","Function"],"valide":["'auto'"],"name":"interval","desc":"\n\nAxis splitArea is valid in the category axis.  Defaults to the same as [axisLabel.interval](~.axisLabel.interval). \n\nBy default, `interval` is automatically calculated to ensure a good display.\n\nIt can be set to 0 to force all labels to be displayed.\n\nIf the value is `1`, it means \"displays a label every other label\". If the value is `2`, it means \"displays a label between two labels\", and so on.\n\nThe interval data can be represented by a numerical value or by a callback function. The format of the callback function is as follows:\n\n```js\n(index:number, value: string) => boolean\n```\n\nThe first parameter is the index of the class, the second value is the name of the class, and if it is skipped, it returns `false`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"areaStyle","desc":"\nSplit area style."}],"zAxis3D.splitArea.areaStyle":[{"type":["Array"],"valide":["['rgba(250'","'250'","'250'","'0.3)''","''rgba(200'","'200'","'200'","'0.3)']"],"name":"color","desc":"\nColor of the split area.\nThe split area color could also be set in color array, which the split lines would take as their colors in turns. Dark and light colors in turns are used by default.\n\n\n\n\n\n\n\n\n"}],"zAxis3D.axisPointer":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the axisPointer. Set this to be `true` to show the splitArea.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nThe label of axisPointer.\n"}],"zAxis3D.axisPointer.lineStyle":[{"type":["string"],"valide":["'rgba(0'","' 0'","' 0'","' 0.8)'"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n"}],"zAxis3D.axisPointer.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the label of axisPointer. Value axes are displayed by default, while category axes are not.\n"},{"type":["Function"],"valide":[],"name":"formatter","desc":"\nThe formatter of the label. . The first parameter to the function is the value of the current axis. The second parameter to the function is an array of values for all axes.\n\n```js\n(value: number, valueAll: Array) => string\n```\n"},{"type":["number"],"valide":[],"name":"margin","desc":"\nDistance between label and axis.\nLike the scale label, this distance is a 3D space rather than a screen pixel.\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\n\n"}],"zAxis3D.axisPointer.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[16],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}],"series.scatter3D":[{"type":["string"],"valide":["'scatter3D'"],"name":"type","desc":"\n\n"},{"type":["string"],"valide":[],"name":"name","desc":"\nSeries name used for displaying in [tooltip](https://echarts.apache.org/zh/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/zh/option.html#legend), or updating data and configuration with `setOption`.\n\n\n\n\n"},{"type":["string"],"valide":[],"name":"coordinateSystem","desc":"\n\nThe coordinate used in the series, whose options are:\n\n\n\n\n\n+ `'cartesian3D'`\n\n    Use a 3D rectangular coordinate (also known as Cartesian coordinate), with [xAxisIndex](~series-.xAxisIndex) and [yAxisIndex](~series-.yAxisIndex) to assign the corresponding axis component.\n\n\n\n\n+ `'geo3D'`\n    Use 3D geographic coordinate, with [geoIndex](~series-.geoIndex) to assign the corresponding 3D geographic coordinate components.\n\n\n\n\n\n+ `'globe'`\n\n    Use 3D globe coordinate, with [globeIndex](~series-.globeIndex) to assign the corresponding 3D globe coordinate components.\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"grid3DIndex","desc":"\n\nUse the index of the [grid3D](~grid3D) component. The first [grid3D](~grid3D) component is used by default.\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"geo3DIndex","desc":"\n\nThe index of the [geo3D](~geo3D) component used by the axis.The first [grid3D](~grid3D) component is used by default.\n\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"globeIndex","desc":"\n\nThe index of the [globe](~globe) component used by the axis.The first [globe](~globe) component is used by default.\n\n\n\n\n\n\n\n"},{"type":["string"],"valide":["'circle'"],"name":"symbol","desc":"\nThe shape of the scatter. The default is a circle.\n\n\n\nIcon types provided by ECharts includes \n`'circle'`, `'rect'`, `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`, `'none'`\n\n\n\n\n\n\nIcons can be set to arbitrary vector path via `'path://'` in ECharts. As compared with a raster image, vector paths prevent jagging and blurring when scaled, and have better control over changing colors. The size of the vector icon will be adapted automatically. Refer to [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData) for more information about the format of the path. You may export vector paths from tools like Adobe \n\n\n\n\n\n\n\n"},{"type":["number","Array","Function"],"valide":[10],"name":"symbolSize","desc":"\n\n symbol size. It can be set to single numbers like `10`, or use an array to represent width and height. For example, `[20, 10]` means symbol width is `20`, and height is`10`.\n\nIf size of symbols needs to be different, you can set with callback function in the following format:\n\n```js\n(value: Array|number, params: Object) => number|Array\n```\nThe first parameter `value` is the value in [data](~series-.data), and the second parameter `params` is the rest parameters of data item.\n\n\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nSets the style of scatter such as colors, strokes, etc.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nSets the style of label.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"emphasis","desc":"\n\nGraphics and labels are highlighted.\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nThe data array of scatter3D. Each item in the array is a piece of data. Usually, this data stores each attribute/dimension of the data in an array. As Follows:\n```js\ndata: [\n    [[12, 14, 10], [34, 50, 15], [56, 30, 20], [10, 15, 12], [23, 10, 14]]\n]\n```\n\nFor each item in the array：\n\n1. In [grid3D](~grid3D) ,the first three values of each item are`x`, `y`, `z`.\n2. In [geo3D](~geo3D) and [globe](globe) ,the first two values of each item  are longitude `lng`, latitude `lat`,\n\nIn addition to the default values for the coordinates, each item can be added with any number of values to [visualMap](~visualMap) the component for any other graphical property, such as color, etc.\n\n\n\nMore likely, we need to assign name to each data item, in which case each item should be an object:\n\n```js\n[{\n    // name of date item\n    name: 'data1',\n    // value of date item is 8\n    value: [12, 14, 10]\n}, {\n    name: 'data2',\n    value: 20\n}]\n```\nEach data item can be further customized:\n\n```js\n[{\n    name: 'data1',\n    value: [12, 14, 10]\n}, {\n    // name of data item\n    name: 'data2',\n    value : [34, 50, 15],\n    // user-defined special itemStyle that only useful for this data item\n    itemStyle:{}\n}]\n```\n\n\n\n\n"},{"type":["string"],"valide":["'source-over'"],"name":"blendMode","desc":"\n\nSets the type of compositing operation to apply when drawing a new shape. \n\nCurrently supporting `'source-over'`, `'lighter'`. The default is `'source-over'` mode is blended by alpha. The `'lighter'` is overlap mode. In this mode, the area where the number of graphics is concentrated can be highlighted by the overlap.\n\n\n\n\n\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"silent","desc":"\n\nWhether the graph doesn`t respond and triggers a mouse event. The default is false, which is to respond to and trigger mouse events.\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"animation","desc":"\n\nWhether to enable animation.\n"},{"type":["number"],"valide":[500],"name":"animationDurationUpdate","desc":"\n\nThe duration time for update the transition animation.\n"},{"type":["string"],"valide":["cubicOut"],"name":"animationEasingUpdate","desc":"\n\nThe easing effect for update transition animation.\n\n\n\n\n\n\n\n\n"}],"series.scatter3D.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[0.8],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\nSets the width of the border.\n"},{"type":["string"],"valide":["'#fff'"],"name":"borderColor","desc":"\nSets the color of the border.\n\n\n\n"}],"series.scatter3D.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[5],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n"},{"type":["string"],"valide":["right"],"name":"position","desc":"\n\nThe location of the label.\n\n**Optional:**\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.scatter3D.label.textStyle":[{"type":["string"],"valide":["#000"],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[14],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n"}],"series.scatter3D.emphasis.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[0.8],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\nSets the width of the border.\n"},{"type":["string"],"valide":["'#fff'"],"name":"borderColor","desc":"\nSets the color of the border.\n\n\n\n"}],"series.scatter3D.emphasis":[{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\n\n\n"}],"series.scatter3D.emphasis.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[5],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n"},{"type":["string"],"valide":["right"],"name":"position","desc":"\n\nThe location of the label.\n\n**Optional:**\n\n+ 'top'\n+ 'left'\n+ 'right'\n+ 'bottom'\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.scatter3D.emphasis.label.textStyle":[{"type":["string"],"valide":["#000"],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[14],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n"}],"series":[{"type":["Object"],"valide":[],"name":"scatter3D","desc":"\n\n3D scatter chart. It can be used to display data in [grid3D](~grid3D), [ geo3D](~geo3D), [globe](~globe) using attributes such as size、color and so on.\n\nThis example is a 3D simplex noise drawn with a bubble chart.\n\n![500xauto](~scatter3D.png)\n"},{"type":["Object"],"valide":[],"name":"bar3D","desc":"\n\n3D bar. It can be used to display data in [grid3D](~grid3D), [ geo3D](~geo3D), [globe](~globe) using attributes such as size 、color and so on.\n\nThe figure below shows the population density data of the world through a 3D bar chart on [geo3D] (~geo3D).\n\n![700xauto](~geo-bar3D.jpg)\n"},{"type":["Object"],"valide":[],"name":"line3D","desc":"\n\n3D Line. Can be used for [grid3D] (~grid3D)\n\n![600xauto](~line3D.png)\n"},{"type":["Object"],"valide":[],"name":"lines3D","desc":"\n3D lines. Like the 2D [lines] (https://echarts.apache.org/zh/option.html#series-line), it is used to represent the line data from the start point to the end point. More is used in geographic visualization.\n\nBelow is an example of a visual airplane flight using [lines3D](~series-lines3D) on [globe](~globe).\n\n![700xauto](~globe-airline.png)\n"},{"type":["Object"],"valide":[],"name":"map3D","desc":"\n\n**3D map**\n\n3D maps are mainly used for visualizing geographic area data. With the [visualMap] (http://echarts.baidu.com/option.html#visualMap) component, it can be used to display data such as population distribution density in different regions.\n\nCompared to 2D maps, 3D maps can set different heights for each area. This height can be used to display data and to display the height of the building in the building data.\n"},{"type":["Object"],"valide":[],"name":"surface","desc":"\n\nSurface. Support to drawn the [Parameter surface] (https://en.wikipedia.org/wiki/Parametric_surface) by [parametric](~series-surface.parametric).\n\nThe figure below is a parametric surface similar to a metal part configured as a metal material.\n\n![500xauto](~parametric-surface.png)\n"},{"type":["Object"],"valide":[],"name":"polygons3D","desc":"\n\n`polygons3D` is used to visualize polygon data with high information on the map, which is often used for drawing of buildings.\nThe picture below shows the nearly 50w number of New York buildings drawn with `polygons3D`.\n\n![900xauto](~polygons3D-ny.jpg)\n"},{"type":["Object"],"valide":[],"name":"scatterGL","desc":"\n\nA 2D scatter/bubble plot drawn using WebGL.\n\nIt is used in the same way as [scatter](http://echarts.baidu.com/option.html#series-scatter).\n"},{"type":["Object"],"valide":[],"name":"graphGL","desc":"\n\nUses WebGL to drawn the relational chart, support the layout and rendering of large-scale network/relational data.\n"},{"type":["Object"],"valide":[],"name":"flowGL","desc":"\n\nThe `flowGL` component visualizes the traces of the vector field through the particle effects implemented by WebGL.\n\nThe figure below shows the effect of the global wind field visualized by `flowGL`.\n\n![700xauto](~flowGL-wind.jpg)\n"}],"series.bar3D":[{"type":["string"],"valide":["'bar3D'"],"name":"type","desc":"\n\n"},{"type":["string"],"valide":[],"name":"name","desc":"\nSeries name used for displaying in [tooltip](https://echarts.apache.org/zh/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/zh/option.html#legend), or updating data and configuration with `setOption`.\n\n\n\n\n"},{"type":["string"],"valide":["cartesian3D"],"name":"coordinateSystem","desc":"\n\nThe coordinate used in the series, whose options are:\n\n\n\n\n\n+ `'cartesian3D'`\n\n    Use a 3D rectangular coordinate (also known as Cartesian coordinate), with [xAxisIndex](~series-.xAxisIndex) and [yAxisIndex](~series-.yAxisIndex) to assign the corresponding axis component.\n\n\n\n\n+ `'geo3D'`\n    Use 3D geographic coordinate, with [geoIndex](~series-.geoIndex) to assign the corresponding 3D geographic coordinate components.\n\n\n\n\n\n+ `'globe'`\n\n    Use 3D globe coordinate, with [globeIndex](~series-.globeIndex) to assign the corresponding 3D globe coordinate components.\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"grid3DIndex","desc":"\n\nUse the index of the [grid3D](~grid3D) component. The first [grid3D](~grid3D) component is used by default.\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"geo3DIndex","desc":"\n\nThe index of the [geo3D](~geo3D) component used by the axis.The first [grid3D](~grid3D) component is used by default.\n\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"globeIndex","desc":"\n\nThe index of the [globe](~globe) component used by the axis.The first [globe](~globe) component is used by default.\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"bevelSize","desc":"\n\n\nThe size of the bevel.\nSupport for setting values from 0 to 1. The default is 0, which means there is no bevel.\n\nBelow are the differences between beveling and no beveling.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/bar3D-no-bevel.png\" width=\"100%\" title=\"bevelSize: 0\">\n    <img src=\"documents/asset/gl/img/bar3D-bevel.png\" width=\"100%\" title=\"bevelSize: 0.3\">\n</div>\n"},{"type":["number"],"valide":[2],"name":"bevelSmoothness","desc":"\n\nThe smoothness of the bevel, the larger the value, the smoother.\n"},{"type":["string"],"valide":[],"name":"stack","desc":"\n\nStacking of bar chart. On the same category axis, the series with the same `stack` name would be put on top of each other. Note that the data items that need to be stack in different series must have the same index in the array.\n\n"},{"type":["number"],"valide":[0],"name":"minHeight","desc":"\n\nThe minimum width of the bar.\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nThe style of the bar, including color and opacity.\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\nConfigure the label of the bar.\n\n"},{"type":["Object"],"valide":[],"name":"emphasis","desc":"\nConfigure labels and styles for bar highlighting.\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nA data array of 3D bar. Each item of the array is a piece of data. Usually this data is an array to store each attribute/dimension of the data. For example below:\n\n```js\ndata: [\n    [[12, 14, 10], [34, 50, 15], [56, 30, 20], [10, 15, 12], [23, 10, 14]]\n]\n```\nFor each item in the array:\n\n1. In [grid3D] (~grid3D), the first three values of each item are `x`, `y`, `z`.\n2. In [geo3D](~geo3D) and [globe](~globe), the first two values of each item are longitude `lng`, latitude `lat`, and the third value indicates the size of the value, such as the number of people.  This value will be mapped to the range of [minHeight](~series-bar3D.minHeight) ~ [maxHeight](~series-bar3D.maxHeight).\n\nIn addition to the three values used by default for the coordinate system, each item can be added with any number of values for mapping the [visualMap](~visualMap) component to other graphical properties such as color.\n\n\n\nMore likely, we need to assign name to each data item, in which case each item should be an object:\n\n```js\n[{\n    // name of date item\n    name: 'data1',\n    // value of date item is 8\n    value: [12, 14, 10]\n}, {\n    name: 'data2',\n    value: 20\n}]\n```\nEach data item can be further customized:\n\n```js\n[{\n    name: 'data1',\n    value: [12, 14, 10]\n}, {\n    // name of data item\n    name: 'data2',\n    value : [34, 50, 15],\n    // user-defined special itemStyle that only useful for this data item\n    itemStyle:{}\n}]\n```\n\n"},{"type":["string"],"valide":[],"name":"shading","desc":"\n\nThe coloring effect of 3D graphics in 3D Bar. The following three coloring methods are supported in echarts-gl:\n\n+ `'color'`\nOnly display colors, not affected by other factors such as lighting.\n\n+ `'lambert'`\nThrough the classic [lambert] coloring, can express the light and dark that the light shows.\n\n+ `'realistic'`\nRealistic rendering, combined with [light.ambientCubemap](~globe.light.ambientCubemap) and [postEffect](~globe.postEffect), can improve the quality and texture of the display. [Physical Based Rendering (PBR)] (https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/) is used in ECharts GL to represent realistic materials.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"realisticMaterial","desc":"\n\nThe configuration item of the realistic material is valid when [shading](~series-bar3D.shading) is `'realistic'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"lambertMaterial","desc":"\n\nThe configuration item of the lambert material is valid when [shading](~series-bar3D.shading) is `'lambert'`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"colorMaterial","desc":"\n\nThe color material related configuration item is valid when [shading](~series-bar3D.shading) is `'color'`.\n\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"silent","desc":"\n\nWhether the graph doesn`t respond and triggers a mouse event. The default is false, which is to respond to and trigger mouse events.\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"animation","desc":"\n\nWhether to enable animation.\n"},{"type":["number"],"valide":[500],"name":"animationDurationUpdate","desc":"\n\nThe duration time for update the transition animation.\n"},{"type":["string"],"valide":["cubicOut"],"name":"animationEasingUpdate","desc":"\n\nThe easing effect for update transition animation.\n\n\n\n\n\n\n"}],"series.bar3D.itemStyle":[{"type":["string","Function"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"series.bar3D.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.bar3D.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n"}],"series.bar3D.emphasis.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"series.bar3D.emphasis":[{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\n"}],"series.bar3D.emphasis.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.bar3D.emphasis.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n"}],"series.bar3D.data":[{"type":["string"],"valide":[],"name":"name","desc":"\nThe name of data item.\n"},{"type":["Array"],"valide":[],"name":"value","desc":"\nData value.\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\nThe style setting of a single data item.\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nThe label setting of a single data item.\n\n"},{"type":["Object"],"valide":[],"name":"emphasis","desc":"\nConfigure labels and styles for a sigle data item highlighting.\n"}],"series.bar3D.data.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"series.bar3D.data.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.bar3D.data.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n"}],"series.bar3D.data.emphasis.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"series.bar3D.data.emphasis":[{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\n"}],"series.bar3D.data.emphasis.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.bar3D.data.emphasis.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n"}],"series.bar3D.realisticMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0.5],"name":"roughness","desc":"\n\nThe `roughness` attribute is used to indicate the roughness of the material, `0` is completely smooth, `1` is completely rough, and the middle value is between the two.\n\n\nThe following images show the effect of `roughness` in `globe](~globe) `0.2` (smooth) and `0.8` (rough).\n\n![autox280](~globe-gloss.png)\n![autox280](~globe-rough.png)\n\n\nWhen you want to express more complex materials. You can set `roughness` directly to the texture that stores the roughness with each pixel as follows.\n\n![300x300](~roughness.png)\n\nThe more white the color in the texture, the larger the value and the rougher it is. You can get texture resources of different materials from resource websites such as [http://freepbr.com/] (http://freepbr.com/). You can also generate it yourself using other tools.\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0],"name":"metalness","desc":"\n\nThe `metalness` attribute is used to indicate whether the material is metal or non-metal, `0` is non-metallic, `1` is metal, and the middle value is between the two. Usually set to `0` and `1` to meet most of the scenes.\n\n\nThe picture below show the difference between `metal' and '0' in [globe](~globe).\n\n![autox280](~globe-metal.png)\n![autox280](~globe-non-metal.png)\n\n\nAs with [roughness](~series-bar3D.realisticMaterial.roughness) you can set `metalness` directly to the metal texture.\n"},{"type":["number"],"valide":[0.5],"name":"roughnessAdjust","desc":"\n\nRoughness adjustment is useful when using roughness map. The overall roughness of the texture can be adjusted. The default is `0.5`, `0` is completely smooth, `1` is completely rough.\n"},{"type":["number"],"valide":[0.5],"name":"metalnessAdjust","desc":"\n\nMetalness adjustment is useful when using metalness maps. The overall metallicity of the texture can be adjusted. The default is `0.5`, `0` is non-metal, `1` is metal.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"normalTexture","desc":"\n\nNormal map of material details.\n\nUsing normal maps, you can still display rich shades of detail on the surface of the object with fewer vertices.\n\n"}],"series.bar3D.lambertMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"}],"series.bar3D.colorMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n\n\n\n\n\n\n"}],"series.line3D":[{"type":["string"],"valide":["'line3D'"],"name":"type","desc":"\n\n"},{"type":["string"],"valide":[],"name":"name","desc":"\nSeries name used for displaying in [tooltip](https://echarts.apache.org/zh/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/zh/option.html#legend), or updating data and configuration with `setOption`.\n\n\n\n\n"},{"type":["string"],"valide":["cartesian3D"],"name":"coordinateSystem","desc":"\n\nThe coordinate used in the series, whose options are:\n\n\n\n\n\n+ `'cartesian3D'`\n\n    Use a 3D rectangular coordinate (also known as Cartesian coordinate), with [xAxisIndex](~series-.xAxisIndex) and [yAxisIndex](~series-.yAxisIndex) to assign the corresponding axis component.\n\n\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"grid3DIndex","desc":"\n\nUse the index of the [grid3D](~grid3D) component. The first [grid3D](~grid3D) component is used by default.\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\nThe style of the lines.\n\n\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nA data array. Each item of the array is a piece of data. Usually this data is an array to store each attribute/dimension of the data. For example below:\n\n```js\ndata: [\n    [[12, 14, 10], [34, 50, 15], [56, 30, 20], [10, 15, 12], [23, 10, 14]]\n]\n```\n\nThe first three values of each item in the array are `x`, `y`, `z`. In addition to these three values, you can add other values to the [visualMap](~visualMap) component to map to other graphical properties such as colors.\n\n\n\nMore likely, we need to assign name to each data item, in which case each item should be an object:\n\n```js\n[{\n    // name of date item\n    name: 'data1',\n    // value of date item is 8\n    value: [12, 14, 10]\n}, {\n    name: 'data2',\n    value: 20\n}]\n```\nEach data item can be further customized:\n\n```js\n[{\n    name: 'data1',\n    value: [12, 14, 10]\n}, {\n    // name of data item\n    name: 'data2',\n    value : [34, 50, 15],\n    // user-defined special itemStyle that only useful for this data item\n    itemStyle:{}\n}]\n```\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"silent","desc":"\n\nWhether the graph doesn`t respond and triggers a mouse event. The default is false, which is to respond to and trigger mouse events.\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"animation","desc":"\n\nWhether to enable animation.\n"},{"type":["number"],"valide":[500],"name":"animationDurationUpdate","desc":"\n\nThe duration time for update the transition animation.\n"},{"type":["string"],"valide":["cubicOut"],"name":"animationEasingUpdate","desc":"\n\nThe easing effect for update transition animation.\n\n\n\n\n\n"}],"series.line3D.lineStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\n\n"}],"series.line3D.lineStyle.lineStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[2],"name":"width","desc":"\n\nThe width of the line.\n\n\n"}],"series.line3D.data":[{"type":["string"],"valide":[],"name":"name","desc":"\nThe name of data item.\n"},{"type":["Array"],"valide":[],"name":"value","desc":"\nData value.\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\nThe style setting of a single data item.\n\n\n"}],"series.line3D.data.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n"}],"series.lines3D":[{"type":["string"],"valide":["'lines3D'"],"name":"type","desc":"\n\n"},{"type":["string"],"valide":[],"name":"name","desc":"\nSeries name used for displaying in [tooltip](https://echarts.apache.org/zh/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/zh/option.html#legend), or updating data and configuration with `setOption`.\n\n\n\n\n"},{"type":["string"],"valide":[],"name":"coordinateSystem","desc":"\n\nThe coordinate used in the series, whose options are:\n\n\n\n\n\n\n\n+ `'geo3D'`\n    Use 3D geographic coordinate, with [geoIndex](~series-.geoIndex) to assign the corresponding 3D geographic coordinate components.\n\n\n\n\n\n+ `'globe'`\n\n    Use 3D globe coordinate, with [globeIndex](~series-.globeIndex) to assign the corresponding 3D globe coordinate components.\n\n\n\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"geo3DIndex","desc":"\n\nThe index of the [geo3D](~geo3D) component used by the axis.The first [grid3D](~grid3D) component is used by default.\n\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"globeIndex","desc":"\n\nThe index of the [globe](~globe) component used by the axis.The first [globe](~globe) component is used by default.\n\n\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"polyline","desc":"\nIf draw as a polyline.\n\nDefault to be `false`. Can only draw a two end straight line.\n\nIf it is set true, [data.coords](~series-lines.data.coords) can have more than two coords to draw a polyline. It is useful when visualizing GPS track data.\n"},{"type":["Object"],"valide":[],"name":"effect","desc":"\n\nThe setting about the special effects of lines.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\nThe line style of the lines.\n\n\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nA data array of 3D lines.\nUsually, each item of data can be a set of coordinates containing the start point and end point.\n\nMore than two coordinates can be supported when [polyline](~series-lines3D.polyline) is set to `true`.\nas follows:\n\n```js\ndata: [\n    [\n        [120, 66, 1], // latitude, longitude and altitude coordinates of the start point\n        [122, 67, 2]  // latitude, longitude and altitude coordinates of the end point\n    ]\n]\n```\nSometimes you need to configure the name of the data item or a separate style. You need to write the latitude and longitude coordinates to the coords property, as follows:\n\n```js\ndata: [\n    {\n        coords: [ [120, 66], [122, 67] ],\n        // The value of data\n        value: 10,\n        // The name of data\n        name: 'foo',\n        // The style of line\n        lineStyle: {}\n    }\n]\n```\n"},{"type":["string"],"valide":["'source-over'"],"name":"blendMode","desc":"\n\nSets the type of compositing operation to apply when drawing a new shape. \n\nCurrently supporting `'source-over'`, `'lighter'`. The default is `'source-over'` mode is blended by alpha. The `'lighter'` is overlap mode. In this mode, the area where the number of graphics is concentrated can be highlighted by the overlap.\n\n\n\n\n\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"silent","desc":"\n\nWhether the graph doesn`t respond and triggers a mouse event. The default is false, which is to respond to and trigger mouse events.\n\n\n\n"}],"series.lines3D.effect":[{"type":["boolean"],"valide":[],"name":"show","desc":"\nWhether to show special effect. It is not displayed by default.\n"},{"type":["number"],"valide":[4],"name":"period","desc":"\n\nThe duration of the special effect, which unit is second.\n"},{"type":["number"],"valide":[],"name":"constantSpeed","desc":"\n\nWhether the moving animation of the trail of special effect has a constant speed, which unit is dimensioned in 3D space. The [period](~series-lines.effect.period) will be ignored when it is set to a non-null value.\n"},{"type":["number"],"valide":[4],"name":"trailWidth","desc":"\n\nThe width of the trail of special effects. \n"},{"type":["number"],"valide":[0.1],"name":"trailLength","desc":"\n\nThe length of trail of special effect.  The values from 0 to 1 could be set. Is the percentage of the length of the line.\n\n"},{"type":["string"],"valide":[],"name":"trailColor","desc":"\n\nThe color of the trail, which default is the same as the line color.\n"},{"type":["number"],"valide":[],"name":"trailOpacity","desc":"\n\nThe opacity of the trail, which default is the same as line opacity.\n\n"}],"series.lines3D.lineStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the line.  Color is taken from [option.color Palette](~color) by default. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[0.5],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n"}],"series.lines3D.data":[{"type":["Array"],"valide":[],"name":"coords","desc":"\n\nAn array of two or more latitude and longitude coordinates. When [polyline](~series-lines3D.polyline) is set to `true`,  support more than two coordinates.\n"},{"type":["Array","number"],"valide":[],"name":"value","desc":"\n\nThe value of data.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\nStyle setting for single data (single line).\n\n\n"}],"series.lines3D.data.lineStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n\n"}],"series.map3D":[{"type":["string"],"valide":["'map3D'"],"name":"type","desc":"\n\n\n"},{"type":["string"],"valide":[],"name":"name","desc":"\nSeries name used for displaying in [tooltip](https://echarts.apache.org/zh/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/zh/option.html#legend), or updating data and configuration with `setOption`.\n\n\n\n\n\n"},{"type":["string"],"valide":[],"name":"map","desc":"\nThe map type. The map type used in ECharts-gl is the same as the [geo](http://echarts.baidu.com/option.html#geo.map) component.\n\nYou can download the required map file in the [Map Download Interface](http://ecomfe.github.io/echarts-builder-web/map3.html), then to import and register it into ECharts.\n \nEChart provides map data in two formats. One is the JS file that can be imported directly through the script tag. After it is introduced, the map name and data will be automatically registered. Another is the JSON file that needs to be registered manually after loaded asynchronously by AJAX.\n\nHere are two types of use examples:\n\n** JavaScript Introduction Example **\n\n```html\n<script src=\"echarts.js\"></script>\n<script src=\"map/js/china.js\"></script>\n<script>\nvar chart = echarts.init(document.getElementById('main'));\nchart.setOption({\n    series: [{\n        type: 'map',\n        map: 'china'\n    }]\n});\n</script>\n```\n\n** JSON Introduction Example **\n\n```js\n$.get('map/json/china.json', function (chinaJson) {\n    echarts.registerMap('china', chinaJson);\n    var chart = echarts.init(document.getElementById('main'));\n    chart.setOption({\n        series: [{\n            type: 'map',\n            map: 'china'\n        }]\n    });\n});\n```\n\nECharts uses the data in [geoJSON] (http://geojson.org/) format as the outline of the map. In addition, you can also obtain data in [geoJSON] (http://geojson.org/) format of the map by other means and register it in ECharts.\n\n\n"},{"type":["number"],"valide":[100],"name":"boxWidth","desc":"\n\n三维地图 width in a 3D scene. With [viewControl.distance](~series-map3D.viewControl.distance) you can get the most appropriate display size.\n\n\n\nThe following image is a schematic diagram of `boxWidth`, `boxHeight`, `boxDepth`, `regionHeight` in 三维地图.\n\n\n![600xauto](~geo-size.png)\n\n\n"},{"type":["number"],"valide":[10],"name":"boxHeight","desc":"\n\n三维地图 height in a 3D scene.\n\n\nComponent height. This height contains the height of the bar and scatter on a 3D map.\n\n"},{"type":["number"],"valide":["auto"],"name":"boxDepth","desc":"\n\n三维地图 depth in a 3D scene.\n\n\nThe component depth defaults to automatic, ensuring that the scale of the 3D component is the same as the ratio of the input GeoJSON.\n\n\n"},{"type":["number"],"valide":[3],"name":"regionHeight","desc":"\n\nThe height of each area of the 3D map. This height is the height of the model, less than [boxHeight](~series-map3D.boxHeight). `boxHeight - regionHeight` will be used for the display of 3D bar, 3D scatter, and etc.\n\n\n\n\n"},{"type":["string"],"valide":["'auto'"],"name":"environment","desc":"\n\nEnvironment map. Support for solid colors, gradual colors, URL of panoramic texture. The default is `'auto'`, which is used as the environment texture when [light.ambientCubemap.texture](~series-map3D.light.ambientCubemap.texture) is configured. Otherwise, the environment texture is not displayed.\n\nExample: \n```js\n// Configure as a panoramic texture\nenvironment: 'asset/starfield.jpg'\n// Configured as a solid black background\nenvironment: '#000'\n// Configured as a background with a vertical gradient\nenvironment: new echarts.graphic.LinearGradient(0, 0, 0, 1, [{\n  offset: 0, color: '#00aaff' // Sky color\n}, {\n  offset: 0.7, color: '#998866' // Ground color\n}, {\n  offset: 1, color: '#998866' // Ground color\n}], false)\n\n```\n\n\n"},{"type":["Object"],"valide":[],"name":"groundPlane","desc":"\n\nThe ground allows the entire assembly to be “placed” to make the entire scene look more realistic.\n\n `groundPlane` supports setting up separate `realisticMaterial`, `colorMaterial`, `lambertMaterial` and other materials. If not set, the material parameters of the component are taken by default.\n\n"},{"type":["boolean"],"valide":[],"name":"instancing","desc":"\n\n`instancing` will merge all the [geometry](http://geojson.org/geojson-spec.html#geometry-objects)  in GeoJSON into one. When GeoJSON has a lot of (thousands) [geometry](http://geojson.org/geojson-spec.html#geometry-objects), it can effectively improve drawing efficiency.\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nThe setting of the label.\n\n\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nVisual properties of 3D graphics in 三维地图, including color, transparency, strokes, etc.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"emphasis","desc":"\n\nGraphic and label styles when mouse hover is highlighted.\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nThe setting of the map area.\n"},{"type":["string"],"valide":[],"name":"shading","desc":"\n\nThe coloring effect of 3D graphics in 三维地图. The following three coloring methods are supported in echarts-gl:\n\n+ `'color'`\nOnly display colors, not affected by other factors such as lighting.\n\n+ `'lambert'`\nThrough the classic [lambert] coloring, can express the light and dark that the light shows.\n\n+ `'realistic'`\nRealistic rendering, combined with [light.ambientCubemap](~globe.light.ambientCubemap) and [postEffect](~globe.postEffect), can improve the quality and texture of the display. [Physical Based Rendering (PBR)] (https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/) is used in ECharts GL to represent realistic materials.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"realisticMaterial","desc":"\n\nThe configuration item of the realistic material is valid when [shading](~series-map3D.shading) is `'realistic'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"lambertMaterial","desc":"\n\nThe configuration item of the lambert material is valid when [shading](~series-map3D.shading) is `'lambert'`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"colorMaterial","desc":"\n\nThe color material related configuration item is valid when [shading](~series-map3D.shading) is `'color'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"light","desc":"\n\nLight related settings. Invalid when [shading](~series-map3D.shading) is 'color'.\n\nThe lighting settings affect the components and all the charts on the component's coordinate system.\n\nA reasonable lighting setting can make the brightness and darkness of the whole scene richer and more layered.\n"},{"type":["Object"],"valide":[],"name":"postEffect","desc":"\n\nPost-processing effects related configuration. It can add effects such as highlights, depth of field, screen space ambient occlusion (SSAO), toning to the picture. And it can make the whole picture more textured.\n\nThe following are the differences between closing `postEffect` and opening `postEffect`.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-disable.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/globe-posteffect-enable.png\" width=\"100%\" title=\"Enable\">\n</div>\n\nNote that when postEffect is enable, [temporalSuperSampling](~series-map3D.temporalSuperSampling) is enable by default. After the picture is still, the picture will continue to be enhanced, including anti-aliasing, depth of field, SSAO, shadows, etc.\n"},{"type":["Object"],"valide":[],"name":"temporalSuperSampling","desc":"\n\nTemporal supersampling. After opening [postEffect](~series-map3D.postEffect), WebGL's default MSAA (MultiSampling Anti-Aliasing) will not work, so we need to solve the problem of sampling.\n\nTemporal supersampling is an anti-aliasing method. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated, thus achieving anti-aliasing effect.\nAnd in this process, ECharts-gl also progressively enhances some of the effects in [postEffect](~series-map3D.postEffect) that require sampled guarantees. For example [SSAO](~series-map3D.postEffect.SSAO), [Depth of Field](~series-map3D.postEffect.depthOfField), and shadow.\n\nThe following is the difference between not opening `temporalSuperSampling` and opening `temporalSuperSampling`.\n\n<div class=\"twentytwenty-container\" style=\"width: 800px;\">\n    <img src=\"documents/asset/gl/img/surface-no-taa.png\" width=\"100%\" title=\"No AA\">\n    <img src=\"documents/asset/gl/img/surface-taa.png\" width=\"100%\" title=\"AA\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"viewControl","desc":"\n\n`viewControl` is used for mouse rotation, zooming, and other perspective control.\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n\n"},{"type":["string","number"],"valide":["auto"],"name":"left","desc":"\n\nDistance between  component and the left side of the container.\n\n`left` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'left'`, `'center'`, or `'right'`.\n\nIf the `left` value is set to be `'left'`, `'center'`, or `'right'`, then the component will be aligned automatically based on position.\n"},{"type":["string","number"],"valide":["auto"],"name":"top","desc":"\n\nDistance between  component and the top side of the container.\n\n`top` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`; and it can also be `'top'`, `'middle'`, or `'bottom'`.\n\nIf the `left` value is set to be `'top'`, `'middle'`, or `'bottom'`, then the component will be aligned automatically based on position.\n"},{"type":["string","number"],"valide":["auto"],"name":"right","desc":"\n\nDistance between  component and the right side of the container.\n\n`right` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\n Adaptive by default.\n"},{"type":["string","number"],"valide":["auto"],"name":"bottom","desc":"\n\nDistance between  component and the bottom side of the container.\n\n`bottom` value can be instant pixel value like `20`; it can also be a percentage value relative to container width like `'20%'`.\n\n Adaptive by default.\n\n"},{"type":["string","number"],"valide":["auto"],"name":"width","desc":"\n\n The width of the view of the component.\n"},{"type":["string","number"],"valide":["auto"],"name":"height","desc":"\n\n The height of the view of the component.\n\n\n\n\n\n\n\n\n"}],"series.map3D.groundPlane":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display the ground.\n"},{"type":["string"],"valide":["'#aaa'"],"name":"color","desc":"\n\nThe color of the ground.\n"}],"series.map3D.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.map3D.label.textStyle":[{"type":["string"],"valide":["\"#fff\""],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[12],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n"}],"series.map3D.itemStyle":[{"type":["string","Function"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe width of the border. With the border, you can distinguish each area more clearly. As shown below:\n\n![](~geo-border.png)\n"},{"type":["string"],"valide":["#333"],"name":"borderColor","desc":"\nThe color of the border.\n\n\n\n"}],"series.map3D.emphasis.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.map3D.emphasis.label.textStyle":[{"type":["string"],"valide":["#000"],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n"}],"series.map3D.emphasis":[{"type":["Object"],"valide":[],"name":"label","desc":"\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\n\n"}],"series.map3D.emphasis.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"series.map3D.data":[{"type":["string"],"valide":[],"name":"name","desc":"\nThe name of the corresponding map area, such as `'Guangdong'`, `'Zhejiang'`.\n\n"},{"type":["number"],"valide":[],"name":"value","desc":"\nThe data value for this area.\n\n"},{"type":["number"],"valide":[],"name":"regionHeight","desc":"\n\nThe height of the area. Different heights can be set to express the size of the data. When GeoJSON is the data of the building, this value can also be used to represent the approximate height. As shown below：\n\n\n![700xauto](~city-region-height.jpg)\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nStyle settings for a single area.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\nLabel settings for a single area.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"emphasis","desc":"\n\nSetting the highlight for labels and styles for a single area.\n"}],"series.map3D.data.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe width of the border. With the border, you can distinguish each area more clearly. As shown below:\n\n![](~geo-border.png)\n"},{"type":["string"],"valide":["#333"],"name":"borderColor","desc":"\nThe color of the border.\n\n\n\n"}],"series.map3D.data.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.map3D.data.label.textStyle":[{"type":["string"],"valide":["#000"],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n"}],"series.map3D.data.emphasis.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\n\nThe width of the border. With the border, you can distinguish each area more clearly. As shown below:\n\n![](~geo-border.png)\n"},{"type":["string"],"valide":["#333"],"name":"borderColor","desc":"\nThe color of the border.\n\n\n\n"}],"series.map3D.data.emphasis":[{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"label","desc":"\n\n\n\n\n"}],"series.map3D.data.emphasis.label":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to show the label.\n"},{"type":["number"],"valide":[2],"name":"distance","desc":"\n\nDistance to the host graphic element.\n\nThe distance from the label to the graphic. In a 3D Scatter, this distance is the pixel value of the screen space. In other figures, this distance is the relative 3D distance.\n\n\n"},{"type":["Function","string"],"valide":[],"name":"formatter","desc":"\n\nThe formatter of the label content, which supports the string template and the callback function. In either form, `\\n` is supported to represent a new line.\n\n**String template:** \n\nThe model variation includes:\n+ `{a}`: series name.\n+ `{b}`: the name of a data item.\n+ `{c}`: the value of a data item.\n\n**Example:**\n```js\nformatter: '{b}: {c}'\n```\n\n**Callback function:**\n Callback function is in form of:\n```js\n(params: Object|Array) => string\n```\nThe `params` is the single data set needed by formatter, which is formed as:\n\n\r\n```js\r\n{\r\n    componentType: 'series',\r\n    // Series type\r\n    seriesType: string,\r\n    // Series index in option.series\r\n    seriesIndex: number,\r\n    // Series name\r\n    seriesName: string,\r\n    // Data name, or category name\r\n    name: string,\r\n    // Data index in input data array\r\n    dataIndex: number,\r\n    // Original data as input\r\n    data: Object,\r\n    // Value of data. In most series it is the same as data.\r\n    // But in some series it is some part of the data (e.g., in map, radar)\r\n    value: number|Array|Object,\r\n    // encoding info of coordinate system\r\n    // Key: coord, like ('x' 'y' 'radius' 'angle')\r\n    // value: Must be an array, not null/undefined. Contain dimension indices, like:\r\n    // {\r\n    //     x: [2] // values on dimension index 2 are mapped to x axis.\r\n    //     y: [0] // values on dimension index 0 are mapped to y axis.\r\n    // }\r\n    encode: Object,\r\n    // dimension names list\r\n    dimensionNames: Array<String>,\r\n    // data dimension index, for example 0 or 1 or 2 ...\r\n    // Only work in `radar` series.\r\n    dimensionIndex: number,\r\n    // Color of data\r\n    color: string,\r\n\r\n}\r\n```\r\n\r\nNote: the usage of encode and dimensionNames can be:\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    source: [\r\n        ['Matcha Latte', 43.3, 85.8, 93.7],\r\n        ['Milk Tea', 83.1, 73.4, 55.1],\r\n        ['Cheese Cocoa', 86.4, 65.2, 82.5],\r\n        ['Walnut Brownie', 72.4, 53.9, 39.1]\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.encode.y[0]]\r\n```\r\n\r\nIf data is:\r\n```js\r\ndataset: {\r\n    dimensions: ['product', '2015', '2016', '2017'],\r\n    source: [\r\n        {product: 'Matcha Latte', '2015': 43.3, '2016': 85.8, '2017': 93.7},\r\n        {product: 'Milk Tea', '2015': 83.1, '2016': 73.4, '2017': 55.1},\r\n        {product: 'Cheese Cocoa', '2015': 86.4, '2016': 65.2, '2017': 82.5},\r\n        {product: 'Walnut Brownie', '2015': 72.4, '2016': 53.9, '2017': 39.1}\r\n    ]\r\n}\r\n```\r\nWe can get values that corresponding to y axis by:\r\n```js\r\nparams.value[params.dimensionNames[params.encode.y[0]]]\r\n```\r\n\r\n\r\n\n\n"},{"type":["Object"],"valide":[],"name":"textStyle","desc":"\n\nThe font style of the label.\n\n\n"}],"series.map3D.data.emphasis.label.textStyle":[{"type":["string"],"valide":["#000"],"name":"color","desc":"\n\nThe Color of the text.\n"},{"type":["number"],"valide":[1],"name":"borderWidth","desc":"\n\nThe border width of the text.\n"},{"type":["string"],"valide":["#fff"],"name":"borderColor","desc":"\n\nThe border color of the text.\n"},{"type":["string"],"valide":["'sans-serif'"],"name":"fontFamily","desc":"\n\nThe font family of the text.\n"},{"type":["number"],"valide":[20],"name":"fontSize","desc":"\n\nThe font size of the text.\n"},{"type":["string"],"valide":["normal"],"name":"fontWeight","desc":"\n\nThe font thick weight of the text.\n\n**Optional:**\n+ `'normal'`\n+ `'bold'`\n+ `'bolder'`\n+ `'lighter'`\n+ 100 | 200 | 300 | 400...\n\n\n\n\n\n\n\n\n\n\n"}],"series.map3D.realisticMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0.5],"name":"roughness","desc":"\n\nThe `roughness` attribute is used to indicate the roughness of the material, `0` is completely smooth, `1` is completely rough, and the middle value is between the two.\n\n\nThe following images show the effect of `roughness` in `globe](~globe) `0.2` (smooth) and `0.8` (rough).\n\n![autox280](~globe-gloss.png)\n![autox280](~globe-rough.png)\n\n\nWhen you want to express more complex materials. You can set `roughness` directly to the texture that stores the roughness with each pixel as follows.\n\n![300x300](~roughness.png)\n\nThe more white the color in the texture, the larger the value and the rougher it is. You can get texture resources of different materials from resource websites such as [http://freepbr.com/] (http://freepbr.com/). You can also generate it yourself using other tools.\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0],"name":"metalness","desc":"\n\nThe `metalness` attribute is used to indicate whether the material is metal or non-metal, `0` is non-metallic, `1` is metal, and the middle value is between the two. Usually set to `0` and `1` to meet most of the scenes.\n\n\nThe picture below show the difference between `metal' and '0' in [globe](~globe).\n\n![autox280](~globe-metal.png)\n![autox280](~globe-non-metal.png)\n\n\nAs with [roughness](~series-map3D.realisticMaterial.roughness) you can set `metalness` directly to the metal texture.\n"},{"type":["number"],"valide":[0.5],"name":"roughnessAdjust","desc":"\n\nRoughness adjustment is useful when using roughness map. The overall roughness of the texture can be adjusted. The default is `0.5`, `0` is completely smooth, `1` is completely rough.\n"},{"type":["number"],"valide":[0.5],"name":"metalnessAdjust","desc":"\n\nMetalness adjustment is useful when using metalness maps. The overall metallicity of the texture can be adjusted. The default is `0.5`, `0` is non-metal, `1` is metal.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"normalTexture","desc":"\n\nNormal map of material details.\n\nUsing normal maps, you can still display rich shades of detail on the surface of the object with fewer vertices.\n\n"}],"series.map3D.lambertMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"}],"series.map3D.colorMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n\n\n\n\n\n"}],"series.map3D.light.main":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of the main light source.\n\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of the main light source.\n"},{"type":["boolean"],"valide":[],"name":"shadow","desc":"\n\nWhether the main light source displays a shadow. The default is off.\n\nTurning on the shadows can bring more realistic and layered lighting to the scene. But it also increases the operating overhead of the program.\n\nThe following two images show the difference between turning on the shadow and turning off the shadow.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow.png\" width=\"100%\" title=\"Shadow\">\n    <img src=\"documents/asset/gl/img/geo-no-shadow.png\" width=\"100%\" title=\"No Shadow\">\n</div>\n"},{"type":["string"],"valide":["'medium'"],"name":"shadowQuality","desc":"\n\nThe quality of the shadow. You can choose `'low'`, `'medium'`, `'high'`, `'ultra'`\n\nThe following two images shows the difference between low quality and high quality shadows.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-shadow-low.png\" width=\"100%\" title=\"Low\">\n    <img src=\"documents/asset/gl/img/geo-shadow-high.png\" width=\"100%\" title=\"High\">\n</div>\n"},{"type":["number"],"valide":[40],"name":"alpha","desc":"\n\nThe main light source is around the x-axis, which is the angle of up-down rotation. Control the direction of the light with [beta](~series-map3D.light.main.beta).\n\nAs the following image show:\n\n![](~light-alpha-beta.png)\n\nThe [globe](~globe) component can control the time of sunlight by [time](~globe.light.main.time).\n"},{"type":["number"],"valide":[40],"name":"beta","desc":"\n\nThe main light source is around the y-axis, which is the angle of the left-right rotation.\n\n\n\n\n"}],"series.map3D.light":[{"type":["Object"],"valide":[],"name":"main","desc":"\n\nThe setting of the main light source of the scene. In the [globe](~globe) component is the sun.\n"},{"type":["Object"],"valide":[],"name":"ambient","desc":"\n\nGlobal ambient light settings.\n"},{"type":["Object"],"valide":[],"name":"ambientCubemap","desc":"\n\nThe ambientCubemap uses texture as the source of ambient light, which provides diffuse and specular for objects. The diffuse and specular can be set separately by [diffuseIntensity](~series-map3D.light.ambientCubemap.diffuseIntensity) and [specularIntensity](~series-map3D.light.ambientCubemap.specularIntensity).\n\n"}],"series.map3D.light.ambient":[{"type":["string"],"valide":["#fff"],"name":"color","desc":"\n\nThe color of ambient light.\n"},{"type":["number"],"valide":[0.2],"name":"intensity","desc":"\n\nThe intensity of ambient light.\n"}],"series.map3D.light.ambientCubemap":[{"type":["string"],"valide":[],"name":"texture","desc":"\n\nThe URL of the ambient cubemap supports HDR images in the `.hdr` format. You can obtained the resources for `.hdr` from http://www.hdrlabs.com/sibl/archive.html and other websites.\n\nExample：\n\n```js\nambientCubemap: {\n    texture: 'pisa.hdr',\n    // The exposure value used when analytic hdr\n    exposure: 1.0\n}\n```\n"},{"type":["number"],"valide":[0.5],"name":"diffuseIntensity","desc":"\n\nThe intensity of diffuse.\n"},{"type":["number"],"valide":[0.5],"name":"specularIntensity","desc":"\n\nThe intensity of specular.\n\n\n\n\n\n"}],"series.map3D.postEffect":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable post-processing effects. Not enabled by default.\n"},{"type":["Object"],"valide":[],"name":"bloom","desc":"\n\nBloom is used to reproducing the effects that occur in real cameras when taking pictures in a bright environment.\nBecause traditional RGB can only represent colors in the range of '0 - 255', so we need to use the bloom effect simulates fringes of light extending from the borders of bright areas, creating the illusion of a bright light overwhelming the camera. As shown below：\n\n![](~globe-posteffect-bloom.png)\n"},{"type":["Object"],"valide":[],"name":"depthOfField","desc":"\n\nDepth of Field is a post-processing effect that simulates the focus properties of a camera. The area of focus is clear, and the area away from the focus is gradually blurred.\n\nThe depth of field effect allows the observer to focus on the area of focus and make the picture feel stronger. Large depth of field can also create a macro model effect.\n\nThe following are the differences between turning off and turning on the depth of field effect.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-dof.png\" width=\"100%\" title=\"Disable\">\n    <img src=\"documents/asset/gl/img/geo-dof.png\" width=\"100%\" title=\"Enable\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"screenSpaceAmbientOcclusion","desc":"\n\n\nThe ambient occlusion post-processing effect darkens the corners, holes, crevices, and areas where most light can`t reach. It is a supplement to the traditional shadow map, which makes the whole scene more natural and layered.\n\nBelow is a comparison of the effects of no SSAO and SSAO:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-no-ssao.png\" width=\"100%\" title=\"No SSAO\">\n    <img src=\"documents/asset/gl/img/geo-ssao.png\" width=\"100%\" title=\"SSAO\">\n</div>\n"},{"type":["Object"],"valide":[],"name":"SSAO","desc":"\n\nSame as [screenSpaceAmbientOcclusion](~series-map3D.postEffect.screenSpaceAmbientOcclusion)\n\n"},{"type":["Object"],"valide":[],"name":"colorCorrection","desc":"\n\nColor correction and adjustment. Similar to Color Adjustments in Photoshop.\n\nThe same scene in the figure below is adjusted to the difference between the cool color system and the warm color system.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/buildings-cold.jpg\" width=\"100%\" title=\"Cold\">\n    <img src=\"documents/asset/gl/img/buildings-warm.jpg\" width=\"100%\" title=\"Warm\">\n</div>\n\n"},{"type":["Object"],"valide":[],"name":"FXAA","desc":"\n\nAfter opening [postEffect](~series-map3D.postEffect), WebGL's default MSAA (Multi Sampling Anti Aliasing) will not work. At this time, FXAA (Fast Approximate Anti-Aliasing) can solve the anti-aliasing problem quickly and easily. FXAA blurs the edge of the scene to solve the problem of aliasing. It works well on some scenes, but in echarts-gl, you need to ensure that the edges of many texts and lines are sharp and clear, so FXAA is not suitable. At this point we can use supersampling by setting a higher `devicePixelRatio` as follows:\n\n```js\nvar chart = echarts.init(dom, null, {\n    devicePixelRatio: 2\n})\n```\n\nHowever, setting a higher `devicePixelRatio` has high requirements for computer performance, so more often we recommend using [temporalSuperSampling](~series-map3D.temporalSuperSampling) in echarts-gl. After the picture is still, it will continue to sample multiple times and taken at several instances inside the pixel and an average color value is calculated.,thus achieving anti-aliasing effect.\n"}],"series.map3D.postEffect.bloom":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the bloom effect.\n"},{"type":["number"],"valide":[0.1],"name":"bloomIntensity","desc":"\n\nThe intensity of the bloom. The default is 0.1.\n"}],"series.map3D.postEffect.depthOfField":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the depth of field.\n"},{"type":["boolean"],"valide":[50],"name":"focalDistance","desc":"\n\nThe initial focus distance. The user can click on the area to automatically focus.\n"},{"type":["boolean"],"valide":[20],"name":"focalRange","desc":"\n\nThe size of the in-focus area. The objects in this range are completely clear and there is no blurring.\n\n"},{"type":["number"],"valide":[2.8],"name":"fstop","desc":"\n\n[F value] of the lens (https://zh.wikipedia.org/wiki/%E7%84%A6%E6%AF%94), the smaller the value, the shallower the depth of field.\n"},{"type":["number"],"valide":[10],"name":"blurRadius","desc":"\n\nBlur radius outside the focus.\n\nThe difference blur effect between the different radius. \n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-dof-small.png\" width=\"100%\" title=\"blurSize: 3\">\n    <img src=\"documents/asset/gl/img/geo-dof-large.png\" width=\"100%\" title=\"blurSize: 10\">\n</div>\n"}],"series.map3D.postEffect.SSAO":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable SSAO (screen space ambient occlusion). Not enabled by default.\n"},{"type":["string"],"valide":["'medium'"],"name":"quality","desc":"\n\nThe quality of SSAO (screen space ambient occlusion). Supporting`'low'`, `'medium'`, `'high'`, `'ultra'`\n"},{"type":["number"],"valide":[2],"name":"radius","desc":"\n\nThe radius of the SSAO (screen space ambient occlusion). The larger the radius, the more natural the effect, but you need to set a higher `'quality'`. \n\nThe following example is the difference between a smaller and larger radius:\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/geo-ssao-small-radius.png\" width=\"100%\" title=\"Radius: 1\">\n    <img src=\"documents/asset/gl/img/geo-ssao-large-radius.png\" width=\"100%\" title=\"Radius: 10\">\n</div>\n"},{"type":["number"],"valide":[1],"name":"intensity","desc":"\n\nThe intensity of SSAO (screen space ambient occlusion). The larger the value, the darker the color.\n\n"}],"series.map3D.postEffect.colorCorrection":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable the color correction.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"lookupTexture","desc":"\n\nColor correction lookup texture, recommended.\n\nThe color correction lookup texture is a texture image like the one below.\n\n![200xauto](~lookup.png)\n\nThis is the basic lookup texture image that you can use directly.\nTo adjust the color of the scene to the effect you want, you can take a screenshot of the scene and adjust the color to the desired effect in image processing software such as Photoshop. Then apply the same adjustment to the image of the lookup texture above.\n\nFor example, after turning into a cool tone, the image of the lookup texture will look like this:\n\n![200xauto](~crispwinter.png)\n\nThen the texture image is used as the value of the configuration item, and you can get the same effect in Photoshop.\n\nOf course, if you just want to get a screenshot, you don't have to do it anymore, but if you want to easily adjust to the ideal color in real-time interactive works, this is very useful.\n"},{"type":["number"],"valide":[0],"name":"exposure","desc":"\n\nThe exposure of the image.\n"},{"type":["number"],"valide":[0],"name":"brightness","desc":"\n\nThe brightness of the image.\n"},{"type":["number"],"valide":[1],"name":"contrast","desc":"\n\nThe contrast of the image.\n"},{"type":["number"],"valide":[1],"name":"saturation","desc":"\n\nThe saturation of the image.\n\n\n"}],"series.map3D.postEffect.FXAA":[{"type":["boolean"],"valide":[],"name":"enable","desc":"\n\nWhether to enable FXAA. Not enabled by default.\n\n\n\n\n\n\n\n"}],"series.map3D.temporalSuperSampling":[{"type":["boolean"],"valide":["'auto'"],"name":"enable","desc":"\n\nWhether to enable temporal supersampling. By default, temporal supersampling is also turned on synchronously when [postEffect] (~series-map3D.postEffect) is turned on.\n\n\n\n\n"}],"series.map3D.viewControl":[{"type":["string"],"valide":["perspective"],"name":"projection","desc":"\n\nThe way of projection, the default is `'perspective'` projection, also supports setting to `'orthogonal'` projection.\n\n"},{"type":["boolean"],"valide":[],"name":"autoRotate","desc":"\n\nWhether to enable the angle of view to automatically rotate around the object.\n"},{"type":["string"],"valide":["cw"],"name":"autoRotateDirection","desc":"\n\nThe direction in which the object auto rotates. The default is `'cw'` means clockwise from top to bottom, and can also use  `'ccw'` means counterclockwise from top to bottom.\n"},{"type":["number"],"valide":[10],"name":"autoRotateSpeed","desc":"\n\nThe speed at which the object auto rotates. The unit is `angle/second`, the default is `10`, which is a turn of `36` seconds.\n\n"},{"type":["number"],"valide":[3],"name":"autoRotateAfterStill","desc":"\n\nThe time interval for automatic rotation to resume after the mouse is still. Valid after opening [autoRotate](~series-map3D.viewControl.autoRotate).\n\n"},{"type":["number"],"valide":[0.8],"name":"damping","desc":"\n\nThe damping when the mouse is rotated, zoomed, etc.\nWhen it is greater than 0, the angle of view will continue to move (rotate and zoom) due to certain inertia after the mouse is still.\n\n\n"},{"type":["number","Array"],"valide":[1],"name":"rotateSensitivity","desc":"\n\nThe sensitivity of the rotation operation. The greater the value, the more sensitive. Supports the use of arrays to set the horizontal and vertical rotation sensitivity separately.\n\n\nThe default is `1`.\n\nCannot be rotated after setting to `0`.\n\n```js\n// can't rotate\nrotateSensitivity: 0\n// can only be rotated horizontally\nrotateSensitivity: [1, 0]\n//  can only rotate vertically\nrotateSensitivity: [0, 1]\n```\n"},{"type":["number"],"valide":[1],"name":"zoomSensitivity","desc":"\n\nThe sensitivity of the zoom operation, the larger the value, the more sensitive. The default is `1`.\n\nCan`t be scaled after setting to `0`.\n"},{"type":["number"],"valide":[1],"name":"panSensitivity","desc":"\n\nThe sensitivity of the panning operation, the greater the value, the more sensitive. Supports the use of arrays to set the horizontal and vertical translation sensitivity.\n\nThe default is `1`.\n\nCannot pan after setting to `0`.\n"},{"type":["string"],"valide":["left"],"name":"panMouseButton","desc":"\n\nThe mouse button used for panning operation supports:\n\n+ `'left'` left mouse button (default)\n\n+ `'middle'` middle mouse button\n\n+ `'right'` right mouse button\n\nNote: If set to the right mouse button, the default context menu will be blocked.\n"},{"type":["string"],"valide":["middle"],"name":"rotateMouseButton","desc":"\n\nThe mouse button used for the rotation operation supports:\n\n+ `'left'` left mouse button\n\n+ `'middle'` middle mouse button (default)\n\n+ `'right'` right mouse button\n\nNote: If set to the right mouse button, the default context menu will be blocked.\n"},{"type":["number"],"valide":[100],"name":"distance","desc":"\n\nThe distance of the default perspective from the subject. For [globe](~globe), the distance from the Earth's surface is the distance from the center origin for other components such as [grid3D](~grid3D) and [geo3D](~geo3D). Valid when [projection](~series-map3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[40],"name":"minDistance","desc":"\n\nThe angle of view is controlled by the mouse to bring the minimum distance to the subject. Valid when [projection](~series-map3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[400],"name":"maxDistance","desc":"\n\nThe angle of view can be extended to the maximum distance of the subject by mouse control. Valid when [projection](~series-map3D.viewControl.projection) is `'perspective'`.\n"},{"type":["number"],"valide":[100],"name":"orthographicSize","desc":"\n\nThe size of the orthogonal projection. Valid when [projection](~series-map3D.viewControl.projection) is `'orthographic'`.\n\n"},{"type":["number"],"valide":[20],"name":"maxOrthographicSize","desc":"\n\nThe maximum value of the orthogonal projection scaling. Valid when [projection](~series-map3D.viewControl.projection) is `'orthographic'`.\n"},{"type":["number"],"valide":[400],"name":"minOrthographicSize","desc":"\n\nThe minimum value of the orthogonal projection scaling. Valid when [projection](~series-map3D.viewControl.projection) is `'orthographic'`\n"},{"type":["number"],"valide":[40],"name":"alpha","desc":"\n\nThe angle of view is around the x-axis, which is the angle of rotation up and down. With [beta](~series-map3D.light.main.beta) you can control the direction of the perspective.\n\nAs shown below：\n\n![](~view-alpha-beta.png)\n"},{"type":["number"],"valide":[0],"name":"beta","desc":"\n\nThe angle of view is around the y-axis, which is the angle of rotation from left to right.\n"},{"type":["Array"],"valide":[],"name":"center","desc":"\n\nAt the center of the angle of view, the rotation will also rotate around this center point. The default is `[0,0,0]`.\n"},{"type":["number"],"valide":[5],"name":"minAlpha","desc":"\n\nThe minimum alpha value to rotate up and down. That is, the angle of view can be rotated to reach the uppermost angle.\n"},{"type":["number"],"valide":[90],"name":"maxAlpha","desc":"\n\nThe maximum alpha value to rotate up and down. That is, the angle of view can be rotated to the lowest angle.\n"},{"type":["number"],"valide":[-80],"name":"minBeta","desc":"\n\nThe minimum beta value to rotate left and right. That is, the angle of view can be rotated to the leftmost angle.\n"},{"type":["number"],"valide":[80],"name":"maxBeta","desc":"\n\nThe maximum beta value to rotate left and right rotation. That is, the angle of view can be rotated to the rightmost angle.\n\n\n"},{"type":["boolean"],"valide":[],"name":"animation","desc":"\n\nWhether to enable animation.\n"},{"type":["number"],"valide":[1000],"name":"animationDurationUpdate","desc":"\n\nThe duration time for update the transition animation.\n"},{"type":["string"],"valide":["cubicInOut"],"name":"animationEasingUpdate","desc":"\n\nThe easing effect for update transition animation.\n\n\n\n\n\n\n\n"}],"series.surface":[{"type":["string"],"valide":["'surface'"],"name":"type","desc":"\n\n"},{"type":["string"],"valide":[],"name":"name","desc":"\nSeries name used for displaying in [tooltip](https://echarts.apache.org/zh/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/zh/option.html#legend), or updating data and configuration with `setOption`.\n\n\n\n\n"},{"type":["string"],"valide":["cartesian3D"],"name":"coordinateSystem","desc":"\n\nThe coordinate used in the series, whose options are:\n\n\n\n\n\n+ `'cartesian3D'`\n\n    Use a 3D rectangular coordinate (also known as Cartesian coordinate), with [xAxisIndex](~series-.xAxisIndex) and [yAxisIndex](~series-.yAxisIndex) to assign the corresponding axis component.\n\n\n\n\n\n\n\n"},{"type":["number"],"valide":[0],"name":"grid3DIndex","desc":"\n\nUse the index of the [grid3D](~grid3D) component. The first [grid3D](~grid3D) component is used by default.\n\n\n\n\n\n\n\n\n\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"parametric","desc":"\n\nWhether it is a parametric surface.\n"},{"type":["Object"],"valide":[],"name":"wireframe","desc":"\n\nThe wireframe of the surface.\n"},{"type":["Object"],"valide":[],"name":"equation","desc":"\n\nThe function expression of the surface. If you need to display a function surface, you can set the function expression by [equation](~series-surface.equation) without setting [data](~series-surface.data). For example, the ripple effect can be simulated by the following function.\n\n```js\nequation: {\n    x: {\n        step: 0.1,\n        min: -3,\n        max: 3,\n    },\n    y: {\n        step: 0.1,\n        min: -3,\n        max: 3,\n    },\n    z: function (x, y) {\n        return Math.sin(x * x + y * y) * x / 3.14\n    }\n}\n```\n"},{"type":["Object"],"valide":[],"name":"parametricEquation","desc":"\n\nThe [parameter equation] of the surface (https://zh.wikipedia.org/wiki/%E5%8F%83%E6%95%B8%E6%96%B9%E7%A8%8B). When [data](~series-surface.data) is not set, the parameter parameter equation can be declared by [parametricEquation](~series-surface.equation). Valid when [parametric](~series-surface) is `true`.\n\nThe parametric equations is [x](~series-surface.parametricEquation.x), [y](~series-surface.parametricEquation.y), [z](~series-surface.parametricEquation.z) about the equations of the parameters [u](~series-surface.parametricEquation.u), [v](~series-surface.parametricEquation.v).\n\nThe following parametric equation is to plot the parametric surface of a similar metal part in the previous figure:\n\n```js\nvar aa = 0.4;\nvar r = 1 - aa * aa;\nvar w = sqrt(r);\n...\nparametricEquation: {\n    u: {\n        min: -13.2,\n        max: 13.2,\n        step: 0.5\n    },\n    v: {\n        min: -37.4,\n        max: 37.4,\n        step: 0.5\n    },\n    x: function (u, v) {\n        var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2))\n        return -u + (2 * r * cosh(aa * u) * sinh(aa * u) / denom);\n    },\n    y: function (u, v) {\n        var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2))\n        return 2 * w * cosh(aa * u) * (-(w * cos(v) * cos(w * v)) - (sin(v) * sin(w * v))) / denom;\n    },\n    z: function (u, v) {\n        var denom = aa * (pow(w * cosh(aa * u), 2) + aa * pow(sin(w * v), 2))\n        return  2 * w * cosh(aa * u) * (-(w * sin(v) * cos(w * v)) + (cos(v) * sin(w * v))) / denom\n    }\n}\n```\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nThe color, opacity, and other styles of the surface.\n\n\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nThe data array of the surface.\n\nThe data is an array of linear stores containing multiply `X vertices ` by `Y vertices` data. A 5 x 5 surface has a total of 25 vertices, and the index of the data in the array is as follows\n\n![400xauto](~surface-index.png)\n\nThe data used in the above figure:\n\n```js\ndata: [\n    [-1,-1,0],[-0.5,-1,0],[0,-1,0],[0.5,-1,0],[1,-1,0],\n    [-1,-0.5,0],[-0.5,-0.5,1],[0,-0.5,0],[0.5,-0.5,-1],[1,-0.5,0],\n    [-1,0,0],[-0.5,0,0],[0,0,0],[0.5,0,0],[1,0,0],\n    [-1,0.5,0],[-0.5,0.5,-1],[0,0.5,0],[0.5,0.5,1],[1,0.5,0],\n    [-1,1,0],[-0.5,1,0],[0,1,0],[0.5,1,0],[1,1,0]\n]\n```\n\nEach item is `x`, `y`, `z`.\n\nFor the parametric equation, each item needs to store five data, namely `x`, `y`, `z` and the parameters `u`, `v`. The index of the data is in the order of `u`, `v`. For example the following data:\n\n```js\ndata: [\n    // v is 0, u is from -3.14 to 3.13\n    [0,0,1,-3.14,0],[0,0,1,-1.57,0],[0,0,1,0,0],[0,0,1,1.57,0],[0,0,1,3.14,0],\n    // v is 1.57, u is from -3.14 to 3.13\n    [0,-1,0,-3.14,1.57],[-1,0,0,-1.57,1.57],[0,1,0,0,1.57],[1,0,0,1.57,1.57],[0,-1,0,3.14,1.57],\n    // v is 3.14, u is from -3.14 to 3.13\n    [0,0,-1,-3.14,3.14],[0,0,-1,-1.57,3.14],[0,0,-1,0,3.14],[0,0,-1,1.57,3.14],[0,0,-1,3.14,3.14]]\n]\n```\n\n\n\nMore likely, we need to assign name to each data item, in which case each item should be an object:\n\n```js\n[{\n    // name of date item\n    name: 'data1',\n    // value of date item is 8\n    value: [12, 14, 10]\n}, {\n    name: 'data2',\n    value: 20\n}]\n```\nEach data item can be further customized:\n\n```js\n[{\n    name: 'data1',\n    value: [12, 14, 10]\n}, {\n    // name of data item\n    name: 'data2',\n    value : [34, 50, 15],\n    // user-defined special itemStyle that only useful for this data item\n    itemStyle:{}\n}]\n```\n\n"},{"type":["string"],"valide":[],"name":"shading","desc":"\n\nThe coloring effect of 3D graphics in surface. The following three coloring methods are supported in echarts-gl:\n\n+ `'color'`\nOnly display colors, not affected by other factors such as lighting.\n\n+ `'lambert'`\nThrough the classic [lambert] coloring, can express the light and dark that the light shows.\n\n+ `'realistic'`\nRealistic rendering, combined with [light.ambientCubemap](~globe.light.ambientCubemap) and [postEffect](~globe.postEffect), can improve the quality and texture of the display. [Physical Based Rendering (PBR)] (https://www.marmoset.co/posts/physically-based-rendering-and-you-can-too/) is used in ECharts GL to represent realistic materials.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"realisticMaterial","desc":"\n\nThe configuration item of the realistic material is valid when [shading](~series-surface.shading) is `'realistic'`.\n\n\n"},{"type":["Object"],"valide":[],"name":"lambertMaterial","desc":"\n\nThe configuration item of the lambert material is valid when [shading](~series-surface.shading) is `'lambert'`.\n\n\n\n"},{"type":["Object"],"valide":[],"name":"colorMaterial","desc":"\n\nThe color material related configuration item is valid when [shading](~series-surface.shading) is `'color'`.\n\n\n"},{"type":["number"],"valide":[-10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"silent","desc":"\n\nWhether the graph doesn`t respond and triggers a mouse event. The default is false, which is to respond to and trigger mouse events.\n\n\n\n"},{"type":["boolean"],"valide":[],"name":"animation","desc":"\n\nWhether to enable animation.\n"},{"type":["number"],"valide":[500],"name":"animationDurationUpdate","desc":"\n\nThe duration time for update the transition animation.\n"},{"type":["string"],"valide":["cubicOut"],"name":"animationEasingUpdate","desc":"\n\nThe easing effect for update transition animation.\n\n\n\n\n"}],"series.surface.wireframe":[{"type":["boolean"],"valide":[],"name":"show","desc":"\n\nWhether to display wireframe. Default is Display.\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\nThe style of the wireframe.\n\n\n"}],"series.surface.wireframe.lineStyle":[{"type":["string"],"valide":["#222"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n"}],"series.surface.equation.x":[{"type":["number"],"valide":[],"name":"step","desc":"\nThe step size of x.\n"},{"type":["number"],"valide":[],"name":"min","desc":"\nThe minimum value of x.\n"},{"type":["number"],"valide":[],"name":"max","desc":"\nThe maximum value of x.\n"}],"series.surface.equation":[{"type":["Object"],"valide":[],"name":"x","desc":"\nIndependent variable x.\n"},{"type":["Object"],"valide":[],"name":"y","desc":"\nThe independent variable y.\n"},{"type":["Function"],"valide":[],"name":"z","desc":"\nThe dependent variable z.\n\nz is a function for [x](~series-surface.equation.x), [y](~series-surface.equation.y).\n\n```js\n(x: number, y: number) => number\n```\n"}],"series.surface.equation.y":[{"type":["number"],"valide":[],"name":"step","desc":"\nThe step size of x.\n"},{"type":["number"],"valide":[],"name":"min","desc":"\nThe minimum value of y.\n"},{"type":["number"],"valide":[],"name":"max","desc":"\nThe maximum value of y.\n"}],"series.surface.parametricEquation.u":[{"type":["number"],"valide":[],"name":"step","desc":"\nThe step size of u.\n"},{"type":["number"],"valide":[],"name":"min","desc":"\nThe minimum value of u.\n"},{"type":["number"],"valide":[],"name":"max","desc":"\nThe maximum value of u.\n"}],"series.surface.parametricEquation":[{"type":["Object"],"valide":[],"name":"u","desc":"\nThe argument u.\n"},{"type":["Object"],"valide":[],"name":"v","desc":"\nIndependent variable v.\n"},{"type":["Function"],"valide":[],"name":"x","desc":"\n\nx is a function for [u](~series-surface.equation.u), [v](~series-surface.equation.v).\n\n```js\n(u: number, v: number) => number\n```\n"},{"type":["Function"],"valide":[],"name":"y","desc":"\n\ny is a function for [u](~series-surface.equation.u), [v](~series-surface.equation.v).\n\n```js\n(u: number, v: number) => number\n```\n"},{"type":["Function"],"valide":[],"name":"z","desc":"\n\nz is a function for [u](~series-surface.equation.u), [v](~series-surface.equation.v).\n\n```js\n(u: number, v: number) => number\n```\n\n"}],"series.surface.parametricEquation.v":[{"type":["number"],"valide":[],"name":"step","desc":"\nThe step size of v.\n"},{"type":["number"],"valide":[],"name":"min","desc":"\nThe minimum value of v.\n"},{"type":["number"],"valide":[],"name":"max","desc":"\nThe maximum value of v.\n"}],"series.surface.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"series.surface.data":[{"type":["string"],"valide":[],"name":"name","desc":"\nThe name of the data item.\n"},{"type":["Array"],"valide":[],"name":"value","desc":"\nData item value.\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\nThe style setting for a single data item.\n\n\n"}],"series.surface.data.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n\n\n"}],"series.surface.realisticMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0.5],"name":"roughness","desc":"\n\nThe `roughness` attribute is used to indicate the roughness of the material, `0` is completely smooth, `1` is completely rough, and the middle value is between the two.\n\n\nThe following images show the effect of `roughness` in `globe](~globe) `0.2` (smooth) and `0.8` (rough).\n\n![autox280](~globe-gloss.png)\n![autox280](~globe-rough.png)\n\n\nWhen you want to express more complex materials. You can set `roughness` directly to the texture that stores the roughness with each pixel as follows.\n\n![300x300](~roughness.png)\n\nThe more white the color in the texture, the larger the value and the rougher it is. You can get texture resources of different materials from resource websites such as [http://freepbr.com/] (http://freepbr.com/). You can also generate it yourself using other tools.\n"},{"type":["number","string","HTMLImageElement","HTMLCanvasElement"],"valide":[0],"name":"metalness","desc":"\n\nThe `metalness` attribute is used to indicate whether the material is metal or non-metal, `0` is non-metallic, `1` is metal, and the middle value is between the two. Usually set to `0` and `1` to meet most of the scenes.\n\n\nThe picture below show the difference between `metal' and '0' in [globe](~globe).\n\n![autox280](~globe-metal.png)\n![autox280](~globe-non-metal.png)\n\n\nAs with [roughness](~series-surface.realisticMaterial.roughness) you can set `metalness` directly to the metal texture.\n"},{"type":["number"],"valide":[0.5],"name":"roughnessAdjust","desc":"\n\nRoughness adjustment is useful when using roughness map. The overall roughness of the texture can be adjusted. The default is `0.5`, `0` is completely smooth, `1` is completely rough.\n"},{"type":["number"],"valide":[0.5],"name":"metalnessAdjust","desc":"\n\nMetalness adjustment is useful when using metalness maps. The overall metallicity of the texture can be adjusted. The default is `0.5`, `0` is non-metal, `1` is metal.\n"},{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"normalTexture","desc":"\n\nNormal map of material details.\n\nUsing normal maps, you can still display rich shades of detail on the surface of the object with fewer vertices.\n\n"}],"series.surface.lambertMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n"}],"series.surface.colorMaterial":[{"type":["string","HTMLImageElement","HTMLCanvasElement"],"valide":[],"name":"detailTexture","desc":"\n\nThe texture map of the material detail.\n"},{"type":["number"],"valide":[1],"name":"textureTiling","desc":"\n\nTiles the texture map of the material detail. The default is `1`, which means that the stretch is filled. When greater than `1`, the number indicates how many times the texture is tiled.\n\n**Note:**  The use of tiling requires the `detail texture` height and width to be 2 to the power of n. For example, 512x512, if it is a 200x200 texture, you cannot use tiling.\n"},{"type":["number"],"valide":[0],"name":"textureOffset","desc":"\n\nThe displacement of the texture detail texture.\n\n\n\n\n\n\n\n"}],"series.polygons3D":[{"type":["string"],"valide":["'polygons3D'"],"name":"type","desc":"\n"},{"type":["boolean"],"valide":[],"name":"multiPolygon","desc":"\nWhether a data contains multiple polygons.\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\nGraphic styles, including color, transparency, strokes, and etc.\n\n\n"},{"type":["Object"],"valide":[],"name":"emphasis","desc":"\n\nMouse hover Highlights the style of graphics and labels.\n\n"},{"type":["Object"],"valide":[],"name":"data","desc":"\nA list of data for the polygon.\n\n\n```js\ndata: [{\n    // A square\n    coords: [[0, 0], [100, 0], [100, 100], [0, 100]],\n    // Height\n    height: 3\n}, {\n    // A triangle\n    coords: [[50, 0], [100, 100], [0, 100]],\n    // Height\n    height: 5\n}]\n```\n"},{"type":["number"],"valide":[1000],"name":"progressiveThreshold","desc":"\n\n\nEnable progressive rendering thresholds, progressive rendering can be loading the screen without blocking.\n"},{"type":["number"],"valide":[1000],"name":"progressive","desc":"\n\nProgressively render the amount of data per render.\n\n\n\n\n"}],"series.polygons3D.itemStyle":[{"type":["string","Function"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"series.polygons3D.emphasis.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"}],"series.polygons3D.emphasis":[{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\n\n"}],"series.polygons3D.data":[{"type":["Array"],"valide":[],"name":"coords","desc":"\n\nA list of coordinates of the polygon. If [multiPolygon](~series-polygons3D.multiPolygon) is set to true, it is an array containing multiple polygons.\n\n"}],"series.scatterGL":[{"type":["string"],"valide":["'scatterGL'"],"name":"type","desc":"\n\n"},{"type":["string"],"valide":[],"name":"name","desc":"\nSeries name used for displaying in [tooltip](https://echarts.apache.org/zh/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/zh/option.html#legend), or updating data and configuration with `setOption`.\n\n\n"},{"type":["string"],"valide":["'cartesian2d'"],"name":"coordinateSystem","desc":"\n\nThe coordinate system used.\n\nSame as [scatter.coordinateSystem](http://echarts.baidu.com/option.html#series-scatter.coordinateSystem)\n\n\n"},{"type":["string"],"valide":["'circle'"],"name":"symbol","desc":"\nThe shape of the scatter. The default is a circle.\n\n\n\nIcon types provided by ECharts includes \n`'circle'`, `'rect'`, `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`, `'none'`\n\n\n\n\n\n\nIcons can be set to arbitrary vector path via `'path://'` in ECharts. As compared with a raster image, vector paths prevent jagging and blurring when scaled, and have better control over changing colors. The size of the vector icon will be adapted automatically. Refer to [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData) for more information about the format of the path. You may export vector paths from tools like Adobe \n\n\n\n\n\n\n\n"},{"type":["number","Array","Function"],"valide":[10],"name":"symbolSize","desc":"\n\n symbol size. It can be set to single numbers like `10`, or use an array to represent width and height. For example, `[20, 10]` means symbol width is `20`, and height is`10`.\n\nIf size of symbols needs to be different, you can set with callback function in the following format:\n\n```js\n(value: Array|number, params: Object) => number|Array\n```\nThe first parameter `value` is the value in [data](~series-.data), and the second parameter `params` is the rest parameters of data item.\n\n\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nSets the style of scatter\n\n\n\n\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nThe data array of scatter.\n\nThe data format is the same as [scatter.data](http://echarts.baidu.com/option.html#series-scatter.data)\n"},{"type":["string"],"valide":["'source-over'"],"name":"blendMode","desc":"\n\nSets the type of compositing operation to apply when drawing a new shape. \n\nCurrently supporting `'source-over'`, `'lighter'`. The default is `'source-over'` mode is blended by alpha. The `'lighter'` is overlap mode. In this mode, the area where the number of graphics is concentrated can be highlighted by the overlap.\n\n\n\n\n\n\n"},{"type":["number"],"valide":[10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n"},{"type":["number"],"valide":[100000],"name":"progressiveThreshold","desc":"\n\nEnable progressive rendering thresholds, progressive rendering can be loading the screen without blocking.\n"},{"type":["number"],"valide":[100000],"name":"progressive","desc":"\n\nProgressively render the amount of data per render."}],"series.scatterGL.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[0.8],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\nSets the width of the border.\n"},{"type":["string"],"valide":["'#fff'"],"name":"borderColor","desc":"\nSets the color of the border.\n\n\n\n"}],"series.scatterGL.data":[{"type":["string"],"valide":[],"name":"name","desc":"\n\nThe name of the data item.\n"},{"type":["number","Array"],"valide":[],"name":"value","desc":"\n\nData item value\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nThe style of a single data graphic.\n\n\n\n\n"}],"series.scatterGL.data.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[0.8],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\nSets the width of the border.\n"},{"type":["string"],"valide":["'#fff'"],"name":"borderColor","desc":"\nSets the color of the border.\n\n\n\n\n\n"}],"series.graphGL":[{"type":["string"],"valide":["'graphGL'"],"name":"type","desc":"\n\n"},{"type":["string"],"valide":[],"name":"name","desc":"\nSeries name used for displaying in [tooltip](https://echarts.apache.org/zh/option.html#tooltip) and filtering with [legend](https://echarts.apache.org/zh/option.html#legend), or updating data and configuration with `setOption`.\n\n\n"},{"type":["string"],"valide":["'forceAtlas2'"],"name":"layout","desc":"\n\nThe continuous graph layout algorithm supports the [forceAtlas2](https://github.com/gephi/gephi/wiki/Force-Atlas-2) algorithm layout using gephi.\n"},{"type":["Object"],"valide":[],"name":"forceAtlas2","desc":"\n\n[forceAtlas2](https://github.com/gephi/gephi/wiki/Force-Atlas-2) a continuous graph layout algorithm.\n\nThe algorithm has efficient layout efficiency and stable layout results for large-scale network data.\n\nSupport for configuring GPU or CPU layout via [forceAtlas2.GPU](~series-graphGL.forceAtlas2.GPU).\n\nThe advantage of the CPU is that it is compatible, and the GPU implementation has dozens or even hundreds of performance advantages in high-end graphics cards.\n\nBelow is a performance comparison of the iteration of a layout of a 2w node (nearly 5w edges) on a GTX1070 and an i7 4GHz computer.\n\n![400xauto](~gpu-layout-perf.png)\n"},{"type":["string"],"valide":["'circle'"],"name":"symbol","desc":"\nThe shape of the scatter. The default is a circle.\n\n\n\nIcon types provided by ECharts includes \n`'circle'`, `'rect'`, `'roundRect'`, `'triangle'`, `'diamond'`, `'pin'`, `'arrow'`, `'none'`\n\n\n\n\n\n\nIcons can be set to arbitrary vector path via `'path://'` in ECharts. As compared with a raster image, vector paths prevent jagging and blurring when scaled, and have better control over changing colors. The size of the vector icon will be adapted automatically. Refer to [SVG PathData](http://www.w3.org/TR/SVG/paths.html#PathData) for more information about the format of the path. You may export vector paths from tools like Adobe \n\n\n\n\n\n\n\n"},{"type":["number","Array","Function"],"valide":[5],"name":"symbolSize","desc":"\n\n symbol size. It can be set to single numbers like `10`, or use an array to represent width and height. For example, `[20, 10]` means symbol width is `20`, and height is`10`.\n\nIf size of symbols needs to be different, you can set with callback function in the following format:\n\n```js\n(value: Array|number, params: Object) => number|Array\n```\nThe first parameter `value` is the value in [data](~series-.data), and the second parameter `params` is the rest parameters of data item.\n\n\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nThe style settings for the node.\n\n\n\n\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\nThe style setting of the relationship line.\n\n\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nThe data set of the node.\n\nThe data format is the same as [graph.data](http://echarts.baidu.com/option.html#series-graph.data)\n"},{"type":["Array"],"valide":[],"name":"nodes","desc":"\n\nSame as [graphGL.data](~series-graphGL.data).\n"},{"type":["Array"],"valide":[],"name":"links","desc":"\n\nRelational data between nodes.\nThe data format is the same as [graph.links](http://echarts.baidu.com/option.html#series-graph.links)\n"},{"type":["Array"],"valide":[],"name":"edges","desc":"\n\nSame as [graphGL.links](~series-graphGL.links)\n\n\n\n"},{"type":["number"],"valide":[10],"name":"zlevel","desc":"\n\nThe layer in which the component is located.\n\n`zlevel` is used to make layers with Canvas. Graphical elements with different `zlevel` values will be placed in different Canvases, which is a common optimization technique. We can put those frequently changed elements (like those with animations) to a separate `zlevel`. Notice that too many Canvases will increase memory cost, and should be used carefully on mobile phones to avoid the crash.\n\nCanvases with bigger `zlevel` will be placed on Canvases with smaller `zlevel`.\n\n**Note:** The layers of the components in echarts-gl need to be separated from the layers of the components in echarts. The same `zlevel` cannot be used for both WebGL and Canvas drawing at the same time.\n\n\n\n\n\n"}],"series.graphGL.forceAtlas2":[{"type":["boolean"],"valide":[],"name":"GPU","desc":"\n\nWhether to enable GPU layout.\n"},{"type":["number"],"valide":[1],"name":"steps","desc":"\n\nThe number of iterations of an update. Because the force-guided algorithm usually draws the results of each iteration, but because the drawing time tends to be greater than the layout time, the layout efficiency will be reduced. At this time, we can set a larger `steps` parameter to ensure the layout and Draw time equalization and speed up the layout.\n"},{"type":["number"],"valide":[1],"name":"stopThreshold","desc":"\n\nStops the threshold of the layout and stops the layout when the global velocity factor of the layout is less than this threshold. Set to 0 to never stop.\n"},{"type":["boolean"],"valide":[],"name":"barnesHutOptimize","desc":"\n\nWhether to enable [Barnes Hut] (https://en.wikipedia.org/wiki/Barnes%E2%80%93Hut_simulation) optimization, valid when [forceAtlas2.GPU](~series-graphGL.forceAtlas2.GPU) is false.\n\nThe default is on when the number of nodes > 1000.\n"},{"type":["number"],"valide":[],"name":"repulsionByDegree","desc":"\n\nWhether to calculate the repulsion factor of the node according to the degree of nodes, it is recommended to turn it on.\n"},{"type":["boolean"],"valide":[],"name":"linLogMode","desc":"\n\nWhether it is the `lin-log` mode. The `lin-log` mode makes the nodes of the cluster more compact.\n"},{"type":["number"],"valide":[1],"name":"gravity","desc":"\n\nThe gravity that the node is subjected to. This force will make the nodes close to the center.\n"},{"type":["Array"],"valide":[],"name":"gravityCenter","desc":"\n\nThe position of the gravity center. By default, is the middle point of the initial position.\n"},{"type":["number"],"valide":[],"name":"scaling","desc":"\n\nThe scaling factor of the layout. The larger the value, the greater the repulsive force between the nodes.\n"},{"type":["number"],"valide":[1],"name":"edgeWeightInfluence","desc":"\n\nThe influence factor of the edge weight. The larger the value, the greater the effect of edge weight on gravity.\n\nNote: This factor is exponential, so it is invalid when the edge weights are `0` and `1`.\n"},{"type":["Array","number"],"valide":["[1'","' 4]"],"name":"edgeWeight","desc":"\n\nThe weight distribution of the edges. Mapped from [links.value](~series-graphGL.links.value).\n\nSupport is set to a single number, which is the uniform weight value.\n"},{"type":["Array","number"],"valide":["[1'","' 4]"],"name":"nodeWeight","desc":"\n\nThe weight distribution of the nodes. Mapped from [nodes.value](~series-graphGL.nodes.value).\n\nSupport is set to a single number, which is the uniform weight value.\n"},{"type":["boolean"],"valide":[],"name":"preventOverlap","desc":"\n\nWhether to prevent the nodes from overlapping.\n\n\n"}],"series.graphGL.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\nSets the width of the border.\n"},{"type":["string"],"valide":["'#fff'"],"name":"borderColor","desc":"\nSets the color of the border.\n\n\n\n"}],"series.graphGL.lineStyle":[{"type":["string"],"valide":["#aaa"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n\n\n"}],"series.graphGL.data":[{"type":["string"],"valide":[],"name":"name","desc":"\n\nThe name of the data item.\n"},{"type":["number","Array"],"valide":[],"name":"value","desc":"\n\nData item value.\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nThe style of a single node.\n\n\n\n\n"}],"series.graphGL.data.itemStyle":[{"type":["string"],"valide":["adaptive"],"name":"color","desc":"\n\nThe color of the graphic. \n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the graphic.\n\n\n\n"},{"type":["number"],"valide":[0],"name":"borderWidth","desc":"\nSets the width of the border.\n"},{"type":["string"],"valide":["'#fff'"],"name":"borderColor","desc":"\nSets the color of the border.\n\n\n\n\n"}],"series.graphGL.links":[{"type":["string"],"valide":[],"name":"source","desc":"\n\nA string of source node names for edges also supports the use of numbers to represent the index of the source node.\n"},{"type":["string"],"valide":[],"name":"target","desc":"\n\nA string of the target node name for the edge, which also supports the use of numbers to represent the index of the source node.\n"},{"type":["number"],"valide":[],"name":"value","desc":"\n\nThe value of the edge.\n"},{"type":["Object"],"valide":[],"name":"lineStyle","desc":"\n\nThe style of a single edge.\n\n\n"}],"series.graphGL.links.lineStyle":[{"type":["string"],"valide":["#aaa"],"name":"color","desc":"\n\nThe color of the line. \n\nIn addition to color strings, RGBA values represented by arrays are supported, for example:\n\n\n```js\n// pure white\n[1, 1, 1, 1]\n```\n\nWhen using an array representation, each channel can set a value greater than 1 to represent the color value of HDR.\n"},{"type":["number"],"valide":[1],"name":"opacity","desc":"\n\nThe opacity of the line.\n"},{"type":["number"],"valide":[1],"name":"width","desc":"\n\nThe width of the line.\n\n\n"}],"series.flowGL":[{"type":["string"],"valide":["'flowGL'"],"name":"type","desc":"\n"},{"type":["number"],"valide":[128],"name":"particleDensity","desc":"\n\nThe density of the particles. The actual number of particles is the square of the set number. The higher the particle density, the better the trace effect, but the greater the performance overhead. In addition to this property, you can get a clearer and more consistent trace using [particleType](~series-flowGL.particleType).\n"},{"type":["string"],"valide":["'point'"],"name":"particleType","desc":"\n\nThe type of particle. The default is `'point'`, which can be set to `'line'`. Line-type particles connect the position of the last motion to the position of the current motion with a line, which makes the trajectory more consistent.\n\nThe following are the differences between the types of ``point'` and `'line'`.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/flowGL-point.jpg\" width=\"100%\" title=\"Point\">\n    <img src=\"documents/asset/gl/img/flowGL-line.jpg\" width=\"100%\" title=\"Line\">\n</div>\n"},{"type":["number"],"valide":[1],"name":"particleSize","desc":"\n\nThe size of the particle. If [particleType](~series-flowGL.particleType) is `'line'`, will be expressed as a line width.\n"},{"type":["number"],"valide":[1],"name":"particleSpeed","desc":"\n\nThe speed of the particle, the default is 1. Note that when [particleType](~series-flowGL.particleType) is `'point'`, the excessive speed will make the entire track become intermittent.\n"},{"type":["number"],"valide":[2],"name":"particleTrail","desc":"\n\nThe length of the track of the particle. The larger the value, the longer the track.\n"},{"type":["number"],"valide":[1],"name":"supersampling","desc":"\n\nThe oversampling ratio of the picture, using the '4' supersampling can effectively improve the sharpness of the picture and reduce the picture sawtooth. However, because there is a need to process more pixels, there is a higher performance requirement.\n\nThe following are the differences between no oversampling and a supersampling value of 4.\n\n<div class=\"twentytwenty-container\" style=\"width: 700px;\">\n    <img src=\"documents/asset/gl/img/flowGL-noss.jpg\" width=\"100%\" title=\"No supersampling\">\n    <img src=\"documents/asset/gl/img/flowGL-ss.jpg\" width=\"100%\" title=\"Supersampling=4\">\n</div>\n"},{"type":["number","string"],"valide":["'auto'"],"name":"gridWidth","desc":"\n\nThe number of grid widths of the incoming grid data. `flowGL` will create a floating-point texture of the stored vector field based on this value and [gridHeight](~series-flowGL.gridHeight) for the particle's trajectory calculation.\n"},{"type":["number","string"],"valide":["'auto'"],"name":"gridHeight","desc":"\n\nThe number of grid heights of incoming grid data.\n"},{"type":["Array"],"valide":[],"name":"data","desc":"\n\nThe data of the vector field, including the position of the vector and the direction of the vector (including the size). `flowGL` has no mandatory requirements for the order in which data is stored. You can even pass in sparse vector data.\n\nExample:\n\n```js\ndata: [\n    // Each data item contains four values representing the lng, lat of the position and the speed sLng, sLat on the corresponding dimension.\n    // If it is in a Cartesian coordinate system, it is the position x, y and the speed in the corresponding dimension sx, sy\n    [0, 0, 1, 1], [1, 0, 1, 1],\n    [0, 1, 1, 1], [1, 1, 1, 1]\n];\n```\nThe default `flowGL` will automatically calculate [gridWidth](~series-flowGL.gridWidth) and [gridHeight](~series-flowGL.gridHeight) based on the regular grid data. But because flowGL also supports relatively sparse data formats, you can also specify these two values manually.\n"},{"type":["Object"],"valide":[],"name":"itemStyle","desc":"\n\nThe style of the vector field trace.\n"}],"series.flowGL.itemStyle":[{"type":["string"],"valide":["'#fff'"],"name":"color","desc":"\n\nThe color of the vector field trace. More is to encode the size of the vector through the `visualMap` component as demonstrated in the figure above.\n"},{"type":["number"],"valide":[0.8],"name":"opacity","desc":"\n\nTransparency of vector field traces.\n\n"}],"option-gl":[{"name":"globe","type":["Object"],"desc":"\n\nGlobe component. The component provides the drawing of the Earth and the coordinate system. The developer can display 3D Scatter, 3D Bubble, 3D Bar, 3D Lines on it.\n"},{"name":"geo3D","type":["Object"],"desc":"\n\nA 3D geographic coordinate system component. The component can draw a 3D GeoJSON and coordinate system. Developers can display 3D Scatter, 3D Bubble, 3D Bar, 3D Lines on it.\n\n"},{"name":"mapbox3D","type":["Object"],"desc":"\n\nA geographic component based on mapbox-gl-js. Support for drawing [3D Scatter](~series-scatter3D), [3D Lines](~series-lines3D), [3D Bar](~series-bar3D), [3D map](~series-map3D) on mapbox maps. You can take advantage of Mapbox's powerful map service and ECharts GL's rich visualization and rendering effects to achieve the visualization you want.\n\nYou need to introduce the official sdk of mapbox before using the mapbox component.\n\n```html\n<script src='https://api.mapbox.com/mapbox-gl-js/v0.38.0/mapbox-gl.js'></script>\n<link href='https://api.mapbox.com/mapbox-gl-js/v0.38.0/mapbox-gl.css' rel='stylesheet' />\n```\nThen get the token provided by mapbox and set it to `mapbox.accessToken`.\n\n\n```js\nmapboxgl.accessToken = 'your token';\n```\n\nThen you can use the mapbox component just like any other component.\n\n```js\nchart.setOption({\n    mapbox: {\n        style: 'mapbox://styles/mapbox/dark-v9'\n    }\n});\n```\nGo to [https://www.mapbox.com/mapbox-gl-js/api/](https://www.mapbox.com/mapbox-gl-js/api/) for more details on `mapbox-gl-js sdk`.\n\n"},{"name":"grid3D","type":["Object"],"desc":"\n3D cartesian coordinate system component. It requires [xAxis3D](~xAxis3D), [yAxis3D](~yAxis3D)and [zAxis3D](~zAxis3D) axis components to be used together.\n\nYou can draw [3D Lines](~series-line3D), [3D Bar](~series-bar3D), [3D Scatter](~series-scatter3D), [surface](~series-surface) on the 3D Cartesian coordinate system.\n\nYou can set the [postEffect](~grid3D.postEffect), [light](~grid3D.light) and other configuration items to improve the display of 3D charts in `grid3D`.\n\nBelow is a description of the axis configuration items in grid3D. \n\n![700xauto](~grid3D.png)\n\n---\n\n**Note：** The [axisLine](~xAxis3D.axisLine), [axisTick](~xAxis3D.axisTick), [axisLabel](~xAxis3D.axisLabel), [splitLine](~xAxis3D.splitLine), [splitArea](~xAxis3D.splitArea), [axisPointer](~xAxis3D.axisPointer) set separately on [xAxis3D](~xAxis3D), [yAxis3D](~yAxis3D), [zAxis3D](~zAxis3D) will cover the corresponding configuration items under [grid3D](~grid3D).\n\n"},{"name":"xAxis3D","type":["Object"],"desc":"\n\nThe X-axis in a 3D cartesian coordinate system.\nYou can use [grid3DIndex](~xAxis3D.grid3DIndex) to index [3D cartesian coordinate system](~grid3D).\n\nThe [axisLine](~xAxis3D.axisLine), [axisTick](~xAxis3D.axisTick), [axisLabel](~xAxis3D.axisLabel), [splitLine](~xAxis3D.splitLine), [splitArea](~xAxis3D.splitArea), [axisPointer](~xAxis3D.axisPointer) set separately on [xAxis3D](~xAxis3D) will cover the corresponding configuration items under [grid3D](~grid3D).\n"},{"name":"yAxis3D","type":["Object"],"desc":"\n\nThe Y-axis in a 3D cartesian coordinate system.\nYou can use [grid3DIndex](~yAxis3D.grid3DIndex) to index [3D cartesian coordinate system](~grid3D).\n\nThe [axisLine](~yAxis3D.axisLine), [axisTick](~yAxis3D.axisTick), [axisLabel](~yAxis3D.axisLabel), [splitLine](~yAxis3D.splitLine), [splitArea](~yAxis3D.splitArea), [axisPointer](~yAxis3D.axisPointer) set separately on [yAxis3D](~yAxis3D) will cover the corresponding configuration items under [grid3D](~grid3D).\n"},{"name":"zAxis3D","type":["Object"],"desc":"\n\nThe Z-axis in a 3D cartesian coordinate system.\nYou can use [grid3DIndex](~zAxis3D.grid3DIndex) to index [3D cartesian coordinate system](~grid3D).\n\nThe [axisLine](~zAxis3D.axisLine), [axisTick](~zAxis3D.axisTick), [axisLabel](~zAxis3D.axisLabel), [splitLine](~zAxis3D.splitLine), [splitArea](~zAxis3D.splitArea), [axisPointer](~zAxis3D.axisPointer) set separately on [zAxis3D](~zAxis3D) will cover the corresponding configuration items under [grid3D](~grid3D).\n"},{"name":"series","type":["Array"],"desc":"\nSeries list. Each series decides its diagram type through `type`.\n\nECharts-gl adds a rich 3D visualization type.\nIncluding [3D bar] (~series.bar3D), [3D scatter] (~series.scatter3D), [3D lines] (~series.lines3D), [surface] (~series. Surface),\nMost visualization types can be used in a variety of coordinate system components, and are well integrated with the original echarts legend, tooltip, and other interactive components.\n\nAt the same time, more functional enhancements have been made to the original 2D chart. For example, for scatter chart and diagrams of large amounts of data, you can use [scatterGL](~series.scatterGL), [graphGL](~series.graphGL) provided in echarts-gl to speed up drawing and operations.\n\n\n\n\n"}]}